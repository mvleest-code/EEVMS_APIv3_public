[
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "webdriver",
        "importPath": "selenium",
        "description": "selenium",
        "isExtraImport": true,
        "detail": "selenium",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "Service",
        "importPath": "selenium.webdriver.chrome.service",
        "description": "selenium.webdriver.chrome.service",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.service",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "By",
        "importPath": "selenium.webdriver.common.by",
        "description": "selenium.webdriver.common.by",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.by",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Keys",
        "importPath": "selenium.webdriver.common.keys",
        "description": "selenium.webdriver.common.keys",
        "isExtraImport": true,
        "detail": "selenium.webdriver.common.keys",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "Options",
        "importPath": "selenium.webdriver.chrome.options",
        "description": "selenium.webdriver.chrome.options",
        "isExtraImport": true,
        "detail": "selenium.webdriver.chrome.options",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "ChromeDriverManager",
        "importPath": "webdriver_manager.chrome",
        "description": "webdriver_manager.chrome",
        "isExtraImport": true,
        "detail": "webdriver_manager.chrome",
        "documentation": {}
    },
    {
        "label": "dotenv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dotenv",
        "description": "dotenv",
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "WebDriverWait",
        "importPath": "selenium.webdriver.support.ui",
        "description": "selenium.webdriver.support.ui",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support.ui",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "expected_conditions",
        "importPath": "selenium.webdriver.support",
        "description": "selenium.webdriver.support",
        "isExtraImport": true,
        "detail": "selenium.webdriver.support",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template_string",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template_string",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template_string",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "make_response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "threading",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "threading",
        "description": "threading",
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "json,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json.",
        "description": "json.",
        "detail": "json.",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "keyboard",
        "importPath": "pynput",
        "description": "pynput",
        "isExtraImport": true,
        "detail": "pynput",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "sounddevice",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sounddevice",
        "description": "sounddevice",
        "detail": "sounddevice",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "audioop",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "audioop",
        "description": "audioop",
        "detail": "audioop",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "tqdm",
        "importPath": "tqdm",
        "description": "tqdm",
        "isExtraImport": true,
        "detail": "tqdm",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "CLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "CLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112326",
        "description": ".history.authLocalDev.appdev_20240717112326",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112326",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "CLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "CLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112526",
        "description": ".history.authLocalDev.appdev_20240717112526",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112526",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "CLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "CLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112535",
        "description": ".history.authLocalDev.appdev_20240717112535",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112535",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "CLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "CLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112539",
        "description": ".history.authLocalDev.appdev_20240717112539",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112539",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "CLIENT_ID = \"your_client_id\"\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "CLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112606",
        "description": ".history.authLocalDev.appdev_20240717112606",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112606",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "CLIENT_ID = os\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "CLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112614",
        "description": ".history.authLocalDev.appdev_20240717112614",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112614",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "CLIENT_SECRET = \"your_client_secret\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112617",
        "description": ".history.authLocalDev.appdev_20240717112617",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112617",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = \nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = \nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = \nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "CLIENT_SECRET = \nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112624",
        "description": ".history.authLocalDev.appdev_20240717112624",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112624",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112628",
        "description": ".history.authLocalDev.appdev_20240717112628",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112628",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nadd_password(realm, uri, user, passwd)\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nadd_password(realm, uri, user, passwd)\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nadd_password(realm, uri, user, passwd)\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nadd_password(realm, uri, user, passwd)\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nadd_password(realm, uri, user, passwd)\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112631",
        "description": ".history.authLocalDev.appdev_20240717112631",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112631",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWOR\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWOR\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWOR\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWOR\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWOR\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112633",
        "description": ".history.authLocalDev.appdev_20240717112633",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112633",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112635",
        "description": ".history.authLocalDev.appdev_20240717112635",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112635",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112703",
        "description": ".history.authLocalDev.appdev_20240717112703",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112703",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112711",
        "description": ".history.authLocalDev.appdev_20240717112711",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112711",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112901",
        "description": ".history.authLocalDev.appdev_20240717112901",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112901",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717112934",
        "description": ".history.authLocalDev.appdev_20240717112934",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717112934",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113100",
        "description": ".history.authLocalDev.appdev_20240717113100",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113100",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113157",
        "description": ".history.authLocalDev.appdev_20240717113157",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113157",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113244",
        "description": ".history.authLocalDev.appdev_20240717113244",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113244",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113245",
        "description": ".history.authLocalDev.appdev_20240717113245",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113245",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113306",
        "description": ".history.authLocalDev.appdev_20240717113306",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113306",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113308",
        "description": ".history.authLocalDev.appdev_20240717113308",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113308",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113309",
        "description": ".history.authLocalDev.appdev_20240717113309",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113309",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113316",
        "description": ".history.authLocalDev.appdev_20240717113316",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113316",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113319",
        "description": ".history.authLocalDev.appdev_20240717113319",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113319",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "def main():\n    code = automate_login()\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113321",
        "description": ".history.authLocalDev.appdev_20240717113321",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113321",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "def main():\n    from threading import Thread\n    # Start Flask app in a separate thread\n    Thread(target=lambda: app.run(host=HOST_NAME, port=PORT)).start()\n    # Automate login to get the authorization code\n    automate_login()\nif __name__ == '__main__':\n    main()",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113703",
        "description": ".history.authLocalDev.appdev_20240717113703",
        "peekOfCode": "app = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113703",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "def main(): a\n    from threading import Thread\n    # Start Flask app in a separate thread\n    Thread(target=lambda: app.run(host=HOST_NAME, port=PORT)).start()\n    # Automate login to get the authorization code\n    automate_login()\nif __name__ == '__main__':\n    main()",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113846",
        "description": ".history.authLocalDev.appdev_20240717113846",
        "peekOfCode": "app = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113846",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "def main():\n    from threading import Thread\n    # Start Flask app in a separate thread\n    Thread(target=lambda: app.run(host=HOST_NAME, port=PORT)).start()\n    # Automate login to get the authorization code\n    automate_login()\nif __name__ == '__main__':\n    main()",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717113848",
        "description": ".history.authLocalDev.appdev_20240717113848",
        "peekOfCode": "app = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717113848",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "def main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    # Start Flask app in a separate thread\n    Thread(target=lambda: app.run(host=HOST_NAME, port=PORT)).start()\n    # Automate login to get the authorization code\n    code = automate_login()\n    if not code:\n        print(\"Failed to obtain authorization code. Check logs for details.\")",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114308",
        "description": ".history.authLocalDev.appdev_20240717114308",
        "peekOfCode": "app = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717114308",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "def main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    # Start Flask app in a separate thread\n    Thread(target=lambda: app.run(host=HOST_NAME, port=PORT)).start()\n    # Automate login to get the authorization code\n    code = automate_login()\n    if not code:\n        print(\"Failed to obtain authorization code. Check logs for details.\")",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114706",
        "description": ".history.authLocalDev.appdev_20240717114706",
        "peekOfCode": "app = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717114706",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "def main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    # Start Flask app in a separate thread\n    Thread(target=lambda: app.run(host=HOST_NAME, port=PORT)).start()\n    # Automate login to get the authorization code\n    code = automate_login()\n    if not code:\n        print(\"Failed to obtain authorization code. Check logs for details.\")",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114708",
        "description": ".history.authLocalDev.appdev_20240717114708",
        "peekOfCode": "app = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717114708",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "def main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    # Start Flask app in a separate thread\n    Thread(target=lambda: app.run(host=HOST_NAME, port=PORT)).start()\n    # Automate login to get the authorization code\n    code = automate_login()\n    if not code:\n        print(\"Failed to obtain authorization code. Check logs for details.\")",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114914",
        "description": ".history.authLocalDev.appdev_20240717114914",
        "peekOfCode": "app = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717114914",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "def main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    # Start Flask app in a separate thread\n    Thread(target=lambda: app.run(host=HOST_NAME, port=PORT)).start()\n    # Automate login to get the authorization code\n    code = automate_login()\n    if not code:\n        print(\"Failed to obtain authorization code. Check logs for details.\")",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717114919",
        "description": ".history.authLocalDev.appdev_20240717114919",
        "peekOfCode": "app = Flask(__name__)\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717114919",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        global oauth_object\n        oauth_object = get_tokens(code)\n        auth_code_received.set()\n        return \"Authorization successful. You can close this window.\"\n    else:\n        return \"Failed to obtain authorization code.\"\ndef run_flask():",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "run_flask",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "def run_flask():\n    app.run(host=HOST_NAME, port=PORT)\ndef main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "def main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:\n        print(\"Failed to obtain authorization code. Check logs for details.\")\n        auth_code_received.set()",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "app = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "auth_code_received",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115149",
        "description": ".history.authLocalDev.appdev_20240717115149",
        "peekOfCode": "auth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717115149",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        global oauth_object\n        oauth_object = get_tokens(code)\n        auth_code_received.set()\n        return \"Authorization successful. You can close this window.\"\n    else:\n        return \"Failed to obtain authorization code.\"\ndef run_flask():",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "run_flask",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "def run_flask():\n    app.run(host=HOST_NAME, port=PORT)\ndef main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "def main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:\n        print(\"Failed to obtain authorization code. Check logs for details.\")\n        auth_code_received.set()",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "shutdown_flask_server",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "def shutdown_flask_server():\n    func = request.environ.get('werkzeug.server.shutdown')\n    if func:\n        func()\nif __name__ == '__main__':\n    main()",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "app = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "auth_code_received",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115338",
        "description": ".history.authLocalDev.appdev_20240717115338",
        "peekOfCode": "auth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717115338",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        global oauth_object\n        oauth_object = get_tokens(code)\n        auth_code_received.set()\n        return \"Authorization successful. You can close this window.\"\n    else:\n        return \"Failed to obtain authorization code.\"\n@app.route('/shutdown', methods=['POST'])",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "shutdown",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "def shutdown():\n    func = request.environ.get('werkzeug.server.shutdown')\n    if func:\n        func()\n    return \"Server shutting down...\"\ndef run_flask():\n    app.run(host=HOST_NAME, port=PORT)\ndef main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "run_flask",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "def run_flask():\n    app.run(host=HOST_NAME, port=PORT)\ndef main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "def main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:\n        print(\"Failed to obtain authorization code. Check logs for details.\")\n        auth_code_received.set()",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "app = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "auth_code_received",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115532",
        "description": ".history.authLocalDev.appdev_20240717115532",
        "peekOfCode": "auth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717115532",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        global oauth_object\n        oauth_object = get_tokens(code)\n        auth_code_received.set()\n        return \"Authorization successful. You can close this window.\"\n    else:\n        return \"Failed to obtain authorization code.\"\n@app.route('/shutdown', methods=['POST'])",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "shutdown",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "def shutdown():\n    func = request.environ.get('werkzeug.server.shutdown')\n    if func:\n        func()\n    return \"Server shutting down...\"\ndef run_flask():\n    app.run(host=HOST_NAME, port=PORT)\ndef main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "run_flask",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "def run_flask():\n    app.run(host=HOST_NAME, port=PORT)\ndef main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "def main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:\n        print(\"Failed to obtain authorization code. Check logs for details.\")\n        auth_code_received.set()",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "app = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "auth_code_received",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115743",
        "description": ".history.authLocalDev.appdev_20240717115743",
        "peekOfCode": "auth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717115743",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        global oauth_object\n        oauth_object = get_tokens(code)\n        auth_code_received.set()\n        return \"Authorization successful. You can close this window.\"\n    else:\n        return \"Failed to obtain authorization code.\"\n@app.route('/shutdown', methods=['POST'])",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "shutdown",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "def shutdown():\n    func = request.environ.get('werkzeug.server.shutdown')\n    if func:\n        func()\n    return \"Server shutting down...\"\ndef run_flask():\n    app.run(host=HOST_NAME, port=PORT)\ndef main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "run_flask",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "def run_flask():\n    app.run(host=HOST_NAME, port=PORT)\ndef main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "def main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:\n        print(\"Failed to obtain authorization code. Check logs for details.\")\n        auth_code_received.set()",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "app = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "auth_code_received",
        "kind": 5,
        "importPath": ".history.authLocalDev.appdev_20240717115821",
        "description": ".history.authLocalDev.appdev_20240717115821",
        "peekOfCode": "auth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": ".history.authLocalDev.appdev_20240717115821",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717100007",
        "description": ".history.authSwitchAccount.app_20240717100007",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }\n        self.account_id = \"\"",
        "detail": ".history.authSwitchAccount.app_20240717100007",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101318",
        "description": ".history.authSwitchAccount.app_20240717101318",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }\n        self.account_id = \"\"",
        "detail": ".history.authSwitchAccount.app_20240717101318",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101323",
        "description": ".history.authSwitchAccount.app_20240717101323",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }\n        self.account_id = \"\"",
        "detail": ".history.authSwitchAccount.app_20240717101323",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101325",
        "description": ".history.authSwitchAccount.app_20240717101325",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }\n        self.account_id = \"\"",
        "detail": ".history.authSwitchAccount.app_20240717101325",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101326",
        "description": ".history.authSwitchAccount.app_20240717101326",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }\n        self.account_id = \"\"",
        "detail": ".history.authSwitchAccount.app_20240717101326",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101333",
        "description": ".history.authSwitchAccount.app_20240717101333",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }\n        self.account_id = \"\"",
        "detail": ".history.authSwitchAccount.app_20240717101333",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101347",
        "description": ".history.authSwitchAccount.app_20240717101347",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }\n        self.account_id = \"\"",
        "detail": ".history.authSwitchAccount.app_20240717101347",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101349",
        "description": ".history.authSwitchAccount.app_20240717101349",
        "peekOfCode": "class EagleEyeNetwork:\n    #\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717101349",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101351",
        "description": ".history.authSwitchAccount.app_20240717101351",
        "peekOfCode": "class EagleEyeNetwork:\n    # Initialize the class\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717101351",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101353",
        "description": ".history.authSwitchAccount.app_20240717101353",
        "peekOfCode": "class EagleEyeNetwork:\n    # Initialize the class, \n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717101353",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101356",
        "description": ".history.authSwitchAccount.app_20240717101356",
        "peekOfCode": "class EagleEyeNetwork:\n    # Initialize the class, set the access_token, base_url, and headers\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717101356",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101403",
        "description": ".history.authSwitchAccount.app_20240717101403",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }\n        self.account_id = \"\"",
        "detail": ".history.authSwitchAccount.app_20240717101403",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101404",
        "description": ".history.authSwitchAccount.app_20240717101404",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }\n        self.account_id = \"\"",
        "detail": ".history.authSwitchAccount.app_20240717101404",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101529",
        "description": ".history.authSwitchAccount.app_20240717101529",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717101529",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101948",
        "description": ".history.authSwitchAccount.app_20240717101948",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717101948",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717101954",
        "description": ".history.authSwitchAccount.app_20240717101954",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717101954",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102152",
        "description": ".history.authSwitchAccount.app_20240717102152",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102152",
        "documentation": {}
    },
    {
        "label": "selected_account_identifier",
        "kind": 5,
        "importPath": ".history.authSwitchAccount.app_20240717102152",
        "description": ".history.authSwitchAccount.app_20240717102152",
        "peekOfCode": "selected_account_identifier = <identifier_of_selected_account>\nfor account in accounts:\n    if account['identifier'] == selected_account_identifier:\n        self.account_name = account['name']\n        break\n        # Payload for the POST request to switch accounts\n        payload = {\n            \"scopes\": [\"vms.all\"],\n            \"type\": \"reseller\",\n            \"targetType\": \"account\",",
        "detail": ".history.authSwitchAccount.app_20240717102152",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102155",
        "description": ".history.authSwitchAccount.app_20240717102155",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102155",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102214",
        "description": ".history.authSwitchAccount.app_20240717102214",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102214",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102217",
        "description": ".history.authSwitchAccount.app_20240717102217",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102217",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102224",
        "description": ".history.authSwitchAccount.app_20240717102224",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102224",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102226",
        "description": ".history.authSwitchAccount.app_20240717102226",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102226",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102229",
        "description": ".history.authSwitchAccount.app_20240717102229",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102229",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102237",
        "description": ".history.authSwitchAccount.app_20240717102237",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102237",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102307",
        "description": ".history.authSwitchAccount.app_20240717102307",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102307",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102400",
        "description": ".history.authSwitchAccount.app_20240717102400",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102400",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102524",
        "description": ".history.authSwitchAccount.app_20240717102524",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102524",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102543",
        "description": ".history.authSwitchAccount.app_20240717102543",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102543",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102647",
        "description": ".history.authSwitchAccount.app_20240717102647",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102647",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetwork",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717102649",
        "description": ".history.authSwitchAccount.app_20240717102649",
        "peekOfCode": "class EagleEyeNetwork:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717102649",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetworks",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717103041",
        "description": ".history.authSwitchAccount.app_20240717103041",
        "peekOfCode": "class EagleEyeNetworks:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717103041",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetworkss",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717103103",
        "description": ".history.authSwitchAccount.app_20240717103103",
        "peekOfCode": "class EagleEyeNetworkss:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717103103",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetworks",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717103107",
        "description": ".history.authSwitchAccount.app_20240717103107",
        "peekOfCode": "class EagleEyeNetworks:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717103107",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetworks",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717103117",
        "description": ".history.authSwitchAccount.app_20240717103117",
        "peekOfCode": "class EagleEyeNetworks:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717103117",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetworks",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717103118",
        "description": ".history.authSwitchAccount.app_20240717103118",
        "peekOfCode": "class EagleEyeNetworks:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717103118",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetworks",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717104148",
        "description": ".history.authSwitchAccount.app_20240717104148",
        "peekOfCode": "class EagleEyeNetworks:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717104148",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetworks",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717104224",
        "description": ".history.authSwitchAccount.app_20240717104224",
        "peekOfCode": "class EagleEyeNetworks:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717104224",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetworks",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717104230",
        "description": ".history.authSwitchAccount.app_20240717104230",
        "peekOfCode": "class EagleEyeNetworks:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717104230",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetworks",
        "kind": 6,
        "importPath": ".history.authSwitchAccount.app_20240717104242",
        "description": ".history.authSwitchAccount.app_20240717104242",
        "peekOfCode": "class EagleEyeNetworks:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": ".history.authSwitchAccount.app_20240717104242",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20240612000915",
        "description": ".history.iframeMulti.app_20240612000915",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')",
        "detail": ".history.iframeMulti.app_20240612000915",
        "documentation": {}
    },
    {
        "label": "live",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20240612000915",
        "description": ".history.iframeMulti.app_20240612000915",
        "peekOfCode": "def live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('live.html', access_token=access_token, camera_id=camera_id)\n@app.route('/history', methods=['GET', 'POST'])\ndef history():",
        "detail": ".history.iframeMulti.app_20240612000915",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20240612000915",
        "description": ".history.iframeMulti.app_20240612000915",
        "peekOfCode": "def history():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('history.html', access_token=access_token, camera_id=camera_id)\n@app.route('/historylive', methods=['GET', 'POST'])\ndef historylive():",
        "detail": ".history.iframeMulti.app_20240612000915",
        "documentation": {}
    },
    {
        "label": "historylive",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20240612000915",
        "description": ".history.iframeMulti.app_20240612000915",
        "peekOfCode": "def historylive():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('historylive.html', access_token=access_token, camera_id=camera_id)\nif __name__ == '__main__':\n    app.run(debug=True, port=3337)",
        "detail": ".history.iframeMulti.app_20240612000915",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.iframeMulti.app_20240612000915",
        "description": ".history.iframeMulti.app_20240612000915",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests",
        "detail": ".history.iframeMulti.app_20240612000915",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104140",
        "description": ".history.iframeMulti.app_20241007104140",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')",
        "detail": ".history.iframeMulti.app_20241007104140",
        "documentation": {}
    },
    {
        "label": "live",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104140",
        "description": ".history.iframeMulti.app_20241007104140",
        "peekOfCode": "def live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('live.html', access_token=access_token, camera_id=camera_id)\n@app.route('/history', methods=['GET', 'POST'])\ndef history():",
        "detail": ".history.iframeMulti.app_20241007104140",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104140",
        "description": ".history.iframeMulti.app_20241007104140",
        "peekOfCode": "def history():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('history.html', access_token=access_token, camera_id=camera_id)\n@app.route('/historylive', methods=['GET', 'POST'])\ndef historylive():",
        "detail": ".history.iframeMulti.app_20241007104140",
        "documentation": {}
    },
    {
        "label": "historylive",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104140",
        "description": ".history.iframeMulti.app_20241007104140",
        "peekOfCode": "def historylive():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('historylive.html', access_token=access_token, camera_id=camera_id)\nif __name__ == '__main__':\n    app.run(debug=True, port=333)",
        "detail": ".history.iframeMulti.app_20241007104140",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.iframeMulti.app_20241007104140",
        "description": ".history.iframeMulti.app_20241007104140",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests",
        "detail": ".history.iframeMulti.app_20241007104140",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104141",
        "description": ".history.iframeMulti.app_20241007104141",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')",
        "detail": ".history.iframeMulti.app_20241007104141",
        "documentation": {}
    },
    {
        "label": "live",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104141",
        "description": ".history.iframeMulti.app_20241007104141",
        "peekOfCode": "def live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('live.html', access_token=access_token, camera_id=camera_id)\n@app.route('/history', methods=['GET', 'POST'])\ndef history():",
        "detail": ".history.iframeMulti.app_20241007104141",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104141",
        "description": ".history.iframeMulti.app_20241007104141",
        "peekOfCode": "def history():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('history.html', access_token=access_token, camera_id=camera_id)\n@app.route('/historylive', methods=['GET', 'POST'])\ndef historylive():",
        "detail": ".history.iframeMulti.app_20241007104141",
        "documentation": {}
    },
    {
        "label": "historylive",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104141",
        "description": ".history.iframeMulti.app_20241007104141",
        "peekOfCode": "def historylive():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('historylive.html', access_token=access_token, camera_id=camera_id)\nif __name__ == '__main__':\n    app.run(debug=True, port=3333)",
        "detail": ".history.iframeMulti.app_20241007104141",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.iframeMulti.app_20241007104141",
        "description": ".history.iframeMulti.app_20241007104141",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests",
        "detail": ".history.iframeMulti.app_20241007104141",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104211",
        "description": ".history.iframeMulti.app_20241007104211",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')",
        "detail": ".history.iframeMulti.app_20241007104211",
        "documentation": {}
    },
    {
        "label": "live",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104211",
        "description": ".history.iframeMulti.app_20241007104211",
        "peekOfCode": "def live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('live.html', access_token=access_token, camera_id=camera_id)\n@app.route('/history', methods=['GET', 'POST'])\ndef history():",
        "detail": ".history.iframeMulti.app_20241007104211",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104211",
        "description": ".history.iframeMulti.app_20241007104211",
        "peekOfCode": "def history():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('history.html', access_token=access_token, camera_id=camera_id)\n@app.route('/historylive', methods=['GET', 'POST'])\ndef historylive():",
        "detail": ".history.iframeMulti.app_20241007104211",
        "documentation": {}
    },
    {
        "label": "historylive",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104211",
        "description": ".history.iframeMulti.app_20241007104211",
        "peekOfCode": "def historylive():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('historylive.html', access_token=access_token, camera_id=camera_id)\nif __name__ == '__main__':\n    app.run()",
        "detail": ".history.iframeMulti.app_20241007104211",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.iframeMulti.app_20241007104211",
        "description": ".history.iframeMulti.app_20241007104211",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests",
        "detail": ".history.iframeMulti.app_20241007104211",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104224",
        "description": ".history.iframeMulti.app_20241007104224",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')",
        "detail": ".history.iframeMulti.app_20241007104224",
        "documentation": {}
    },
    {
        "label": "live",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104224",
        "description": ".history.iframeMulti.app_20241007104224",
        "peekOfCode": "def live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('live.html', access_token=access_token, camera_id=camera_id)\n@app.route('/history', methods=['GET', 'POST'])\ndef history():",
        "detail": ".history.iframeMulti.app_20241007104224",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104224",
        "description": ".history.iframeMulti.app_20241007104224",
        "peekOfCode": "def history():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('history.html', access_token=access_token, camera_id=camera_id)\n@app.route('/historylive', methods=['GET', 'POST'])\ndef historylive():",
        "detail": ".history.iframeMulti.app_20241007104224",
        "documentation": {}
    },
    {
        "label": "historylive",
        "kind": 2,
        "importPath": ".history.iframeMulti.app_20241007104224",
        "description": ".history.iframeMulti.app_20241007104224",
        "peekOfCode": "def historylive():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('historylive.html', access_token=access_token, camera_id=camera_id)\nif __name__ == '__main__':\n    app.run(debug=True, port=3333)",
        "detail": ".history.iframeMulti.app_20241007104224",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": ".history.iframeMulti.app_20241007104224",
        "description": ".history.iframeMulti.app_20241007104224",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests",
        "detail": ".history.iframeMulti.app_20241007104224",
        "documentation": {}
    },
    {
        "label": "access_token",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "description": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "peekOfCode": "access_token = \"\"\ncameraId = \"\"\nprint(\"sending audio to server...\")\nurl = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "documentation": {}
    },
    {
        "label": "cameraId",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "description": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "peekOfCode": "cameraId = \"\"\nprint(\"sending audio to server...\")\nurl = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "description": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "peekOfCode": "url = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {\n    'data': ('rubbertukky.raw', open('rubbertukky.raw', 'rb'), 'audio/wav')\n}",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "description": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "peekOfCode": "headers = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {\n    'data': ('rubbertukky.raw', open('rubbertukky.raw', 'rb'), 'audio/wav')\n}\n# making the actual request:",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "description": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "peekOfCode": "files = {\n    'data': ('rubbertukky.raw', open('rubbertukky.raw', 'rb'), 'audio/wav')\n}\n# making the actual request:\nresponse = requests.post(url, headers=headers, files=files)\nprint (\"audio sent successfully\",response.status_code)",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "description": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "peekOfCode": "response = requests.post(url, headers=headers, files=files)\nprint (\"audio sent successfully\",response.status_code)",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240612000915",
        "documentation": {}
    },
    {
        "label": "access_token",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "peekOfCode": "access_token = \"\"\ncameraId = \"\"\nprint(\"sending audio to server...\")\nurl = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "documentation": {}
    },
    {
        "label": "cameraId",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "peekOfCode": "cameraId = \"\"\nprint(\"sending audio to server...\")\nurl = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "peekOfCode": "url = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {\n    'data': ('rubberdukky.raw', open('rubbertukky.raw', 'rb'), 'audio/wav')\n}",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "peekOfCode": "headers = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {\n    'data': ('rubberdukky.raw', open('rubbertukky.raw', 'rb'), 'audio/wav')\n}\n# making the actual request:",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "peekOfCode": "files = {\n    'data': ('rubberdukky.raw', open('rubbertukky.raw', 'rb'), 'audio/wav')\n}\n# making the actual request:\nresponse = requests.post(url, headers=headers, files=files)\nprint (\"audio sent successfully\",response.status_code)",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "peekOfCode": "response = requests.post(url, headers=headers, files=files)\nprint (\"audio sent successfully\",response.status_code)",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104700",
        "documentation": {}
    },
    {
        "label": "access_token",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "peekOfCode": "access_token = \"\"\ncameraId = \"\"\nprint(\"sending audio to server...\")\nurl = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "documentation": {}
    },
    {
        "label": "cameraId",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "peekOfCode": "cameraId = \"\"\nprint(\"sending audio to server...\")\nurl = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "peekOfCode": "url = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {\n    'data': ('rubberdukky.raw', open('rubberdukky.raw', 'rb'), 'audio/wav')\n}",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "peekOfCode": "headers = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {\n    'data': ('rubberdukky.raw', open('rubberdukky.raw', 'rb'), 'audio/wav')\n}\n# making the actual request:",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "peekOfCode": "files = {\n    'data': ('rubberdukky.raw', open('rubberdukky.raw', 'rb'), 'audio/wav')\n}\n# making the actual request:\nresponse = requests.post(url, headers=headers, files=files)\nprint (\"audio sent successfully\",response.status_code)",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "description": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "peekOfCode": "response = requests.post(url, headers=headers, files=files)\nprint (\"audio sent successfully\",response.status_code)",
        "detail": ".history.mediaAudioPushHttps.audiopush_20240717104704",
        "documentation": {}
    },
    {
        "label": "find_python_files",
        "kind": 2,
        "importPath": ".history.gen_20240717121514",
        "description": ".history.gen_20240717121514",
        "peekOfCode": "def find_python_files(root_dir):\n    \"\"\"Recursively find all Python files in the directory.\"\"\"\n    python_files = []\n    for subdir, _, files in os.walk(root_dir):\n        for file in files:\n            if file.endswith('.py'):\n                python_files.append(os.path.join(subdir, file))\n    return python_files\ndef extract_imports(file_path):\n    \"\"\"Extract all imported modules from a Python file.\"\"\"",
        "detail": ".history.gen_20240717121514",
        "documentation": {}
    },
    {
        "label": "extract_imports",
        "kind": 2,
        "importPath": ".history.gen_20240717121514",
        "description": ".history.gen_20240717121514",
        "peekOfCode": "def extract_imports(file_path):\n    \"\"\"Extract all imported modules from a Python file.\"\"\"\n    import_re = re.compile(r'^\\s*(import|from)\\s+([^\\s]+)')\n    imports = set()\n    with open(file_path, 'r', encoding='utf-8') as file:\n        for line in file:\n            match = import_re.match(line)\n            if match:\n                module = match.groups()[1].split('.')[0]\n                imports.add(module)",
        "detail": ".history.gen_20240717121514",
        "documentation": {}
    },
    {
        "label": "get_installed_packages",
        "kind": 2,
        "importPath": ".history.gen_20240717121514",
        "description": ".history.gen_20240717121514",
        "peekOfCode": "def get_installed_packages():\n    \"\"\"Get a dictionary of installed packages with versions.\"\"\"\n    result = subprocess.run(['pip', 'freeze'], stdout=subprocess.PIPE, text=True)\n    packages = {}\n    for line in result.stdout.splitlines():\n        if '==' in line:\n            package, version = line.split('==')\n            packages[package] = version\n    return packages\ndef generate_requirements_file(root_dir, output_file):",
        "detail": ".history.gen_20240717121514",
        "documentation": {}
    },
    {
        "label": "generate_requirements_file",
        "kind": 2,
        "importPath": ".history.gen_20240717121514",
        "description": ".history.gen_20240717121514",
        "peekOfCode": "def generate_requirements_file(root_dir, output_file):\n    \"\"\"Generate requirements.txt with all modules used in Python scripts.\"\"\"\n    python_files = find_python_files(root_dir)\n    all_imports = set()\n    for python_file in python_files:\n        all_imports.update(extract_imports(python_file))\n    installed_packages = get_installed_packages()\n    with open(output_file, 'w', encoding='utf-8') as file:\n        for module in sorted(all_imports):\n            if module in installed_packages:",
        "detail": ".history.gen_20240717121514",
        "documentation": {}
    },
    {
        "label": "find_python_files",
        "kind": 2,
        "importPath": ".history.gen_20240717121709",
        "description": ".history.gen_20240717121709",
        "peekOfCode": "def find_python_files(root_dir):\n    \"\"\"Recursively find all Python files in the directory.\"\"\"\n    python_files = []\n    for subdir, _, files in os.walk(root_dir):\n        for file in files:\n            if file.endswith('.py'):\n                python_files.append(os.path.join(subdir, file))\n    return python_files\ndef extract_imports(file_path):\n    \"\"\"Extract all imported modules from a Python file.\"\"\"",
        "detail": ".history.gen_20240717121709",
        "documentation": {}
    },
    {
        "label": "extract_imports",
        "kind": 2,
        "importPath": ".history.gen_20240717121709",
        "description": ".history.gen_20240717121709",
        "peekOfCode": "def extract_imports(file_path):\n    \"\"\"Extract all imported modules from a Python file.\"\"\"\n    import_re = re.compile(r'^\\s*(import|from)\\s+([^\\s]+)')\n    imports = set()\n    with open(file_path, 'r', encoding='utf-8') as file:\n        for line in file:\n            # Skip comments and docstrings\n            if line.strip().startswith(\"#\") or line.strip().startswith((\"'''\", '\"\"\"')):\n                continue\n            match = import_re.match(line)",
        "detail": ".history.gen_20240717121709",
        "documentation": {}
    },
    {
        "label": "get_installed_packages",
        "kind": 2,
        "importPath": ".history.gen_20240717121709",
        "description": ".history.gen_20240717121709",
        "peekOfCode": "def get_installed_packages():\n    \"\"\"Get a dictionary of installed packages with versions.\"\"\"\n    result = subprocess.run(['pip', 'freeze'], stdout=subprocess.PIPE, text=True)\n    packages = {}\n    for line in result.stdout.splitlines():\n        if '==' in line:\n            package, version = line.split('==')\n            packages[package] = version\n    return packages\ndef generate_requirements_file(root_dir, output_file):",
        "detail": ".history.gen_20240717121709",
        "documentation": {}
    },
    {
        "label": "generate_requirements_file",
        "kind": 2,
        "importPath": ".history.gen_20240717121709",
        "description": ".history.gen_20240717121709",
        "peekOfCode": "def generate_requirements_file(root_dir, output_file):\n    \"\"\"Generate requirements.txt with all modules used in Python scripts.\"\"\"\n    python_files = find_python_files(root_dir)\n    all_imports = set()\n    for python_file in python_files:\n        all_imports.update(extract_imports(python_file))\n    installed_packages = get_installed_packages()\n    with open(output_file, 'w', encoding='utf-8') as file:\n        for module in sorted(all_imports):\n            if module in installed_packages:",
        "detail": ".history.gen_20240717121709",
        "documentation": {}
    },
    {
        "label": "find_python_files",
        "kind": 2,
        "importPath": ".history.gen_20240717121852",
        "description": ".history.gen_20240717121852",
        "peekOfCode": "def find_python_files(root_dir):\n    \"\"\"Recursively find all Python files in the directory.\"\"\"\n    python_files = []\n    for subdir, _, files in os.walk(root_dir):\n        for file in files:\n            if file.endswith('.py'):\n                python_files.append(os.path.join(subdir, file))\n    return python_files\ndef extract_imports(file_path):\n    \"\"\"Extract all imported modules from a Python file.\"\"\"",
        "detail": ".history.gen_20240717121852",
        "documentation": {}
    },
    {
        "label": "extract_imports",
        "kind": 2,
        "importPath": ".history.gen_20240717121852",
        "description": ".history.gen_20240717121852",
        "peekOfCode": "def extract_imports(file_path):\n    \"\"\"Extract all imported modules from a Python file.\"\"\"\n    import_re = re.compile(r'^\\s*(import|from)\\s+([^\\s]+)')\n    imports = set()\n    in_docstring = False\n    with open(file_path, 'r', encoding='utf-8') as file:\n        for line in file:\n            # Handle multiline docstrings\n            if in_docstring:\n                if line.strip().endswith(('\"\"\"', \"'''\")):",
        "detail": ".history.gen_20240717121852",
        "documentation": {}
    },
    {
        "label": "get_installed_packages",
        "kind": 2,
        "importPath": ".history.gen_20240717121852",
        "description": ".history.gen_20240717121852",
        "peekOfCode": "def get_installed_packages():\n    \"\"\"Get a dictionary of installed packages with versions.\"\"\"\n    result = subprocess.run(['pip', 'freeze'], stdout=subprocess.PIPE, text=True)\n    packages = {}\n    for line in result.stdout.splitlines():\n        if '==' in line:\n            package, version = line.split('==')\n            packages[package] = version\n    return packages\ndef generate_requirements_file(root_dir, output_file):",
        "detail": ".history.gen_20240717121852",
        "documentation": {}
    },
    {
        "label": "generate_requirements_file",
        "kind": 2,
        "importPath": ".history.gen_20240717121852",
        "description": ".history.gen_20240717121852",
        "peekOfCode": "def generate_requirements_file(root_dir, output_file):\n    \"\"\"Generate requirements.txt with all modules used in Python scripts.\"\"\"\n    python_files = find_python_files(root_dir)\n    all_imports = set()\n    for python_file in python_files:\n        all_imports.update(extract_imports(python_file))\n    installed_packages = get_installed_packages()\n    with open(output_file, 'w', encoding='utf-8') as file:\n        for module in sorted(all_imports):\n            if module in installed_packages:",
        "detail": ".history.gen_20240717121852",
        "documentation": {}
    },
    {
        "label": "getTokens",
        "kind": 2,
        "importPath": "authCodeGrant.app",
        "description": "authCodeGrant.app",
        "peekOfCode": "def getTokens(code):\n    url = \"https://auth.eagleeyenetworks.com/oauth2/token?grant_type=authorization_code&scope=vms.all&code=\"+code+\"&redirect_uri=http://\"+hostName + \":\" + str(port)\n    response = requests.post(url, auth=(clientId, clientSecret))\n    print(\"the second request\",url)\n    print(response.request.headers,response,response.status_code)\n    return response.text\napp = Flask(__name__)\n@app.route('/')\ndef index():\n    code = request.args.get('code')",
        "detail": "authCodeGrant.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "authCodeGrant.app",
        "description": "authCodeGrant.app",
        "peekOfCode": "def index():\n    code = request.args.get('code')\n    if (code):\n        oauthObject = getTokens(code)\n        print(oauthObject)\n        return f\"You are logged in oauthObject: {oauthObject}\"\n    else:\n        endpoint            = \"https://auth.eagleeyenetworks.com/oauth2/authorize\"\n        requestAuthUrl      = endpoint+\"?client_id=\"+clientId+\"&response_type=code&scope=vms.all&redirect_uri=http://\"+hostName + \":\" + str(port)\n        print(\"the first request\", requestAuthUrl)",
        "detail": "authCodeGrant.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "authCodeGrant.app",
        "description": "authCodeGrant.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef index():\n    code = request.args.get('code')\n    if (code):\n        oauthObject = getTokens(code)\n        print(oauthObject)\n        return f\"You are logged in oauthObject: {oauthObject}\"\n    else:\n        endpoint            = \"https://auth.eagleeyenetworks.com/oauth2/authorize\"",
        "detail": "authCodeGrant.app",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Selenium for automated login\ndef automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "automate_login",
        "kind": 2,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "def automate_login():\n    options = Options()\n    options.add_argument('--headless')\n    options.add_argument('--no-sandbox')\n    options.add_argument('--disable-dev-shm-usage')\n    options.add_argument('--disable-gpu')\n    options.add_argument('--window-size=1920x1080')\n    options.add_argument('--ignore-certificate-errors')\n    options.add_argument('--start-maximized')\n    options.add_argument('--log-level=3')",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "handle_redirect",
        "kind": 2,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "def handle_redirect():\n    code = request.args.get('code')\n    if code:\n        global oauth_object\n        oauth_object = get_tokens(code)\n        auth_code_received.set()\n        return \"Authorization successful. You can close this window.\"\n    else:\n        return \"Failed to obtain authorization code.\"\n@app.route('/shutdown', methods=['POST'])",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "shutdown",
        "kind": 2,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "def shutdown():\n    func = request.environ.get('werkzeug.server.shutdown')\n    if func:\n        func()\n    return \"Server shutting down...\"\ndef run_flask():\n    app.run(host=HOST_NAME, port=PORT)\ndef main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "run_flask",
        "kind": 2,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "def run_flask():\n    app.run(host=HOST_NAME, port=PORT)\ndef main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "def main():\n    if not CLIENT_ID or not CLIENT_SECRET or not USERNAME or not PASSWORD:\n        print(\"Missing environment variables. Please check your .env file.\")\n        return\n    flask_thread = Thread(target=run_flask)\n    flask_thread.start()\n    code = automate_login()\n    if not code:\n        print(\"Failed to obtain authorization code. Check logs for details.\")\n        auth_code_received.set()",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "CLIENT_ID = os.getenv('CLIENT_ID')\nCLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "CLIENT_SECRET = os.getenv('CLIENT_SECRET')\nUSERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "USERNAME",
        "kind": 5,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "USERNAME = os.getenv('USERNAME')\nPASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "PASSWORD",
        "kind": 5,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "PASSWORD = os.getenv('PASSWORD')\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Flask app for handling redirect\napp = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "app = Flask(__name__)\nauth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "auth_code_received",
        "kind": 5,
        "importPath": "authHeadless.app",
        "description": "authHeadless.app",
        "peekOfCode": "auth_code_received = Event()\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": "authHeadless.app",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Route Handlers",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Route Handlers\n@app.route('/')\ndef index():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "def index():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        access_token = oauthObject.get('access_token', 'unknown') if oauthObject else 'unknown'",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "app = Flask(__name__)\n#### please note this is an example script ans should not be used in production ####\n#### If you are using this script in production, please make sure to use a secure method to store the client secret and client id ###\n#### This script is for educational purposes only ####\n#### not recommended for production use, please use a production server like wsgi ####\n# Constants\nHOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = \"\"\nCLIENT_SECRET = \"\"",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = \"\"\nCLIENT_SECRET = \"\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = \"\"\nCLIENT_SECRET = \"\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "CLIENT_ID = \"\"\nCLIENT_SECRET = \"\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "CLIENT_SECRET = \"\"\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "LOGIN_TEMPLATE",
        "kind": 5,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "LOGIN_TEMPLATE = '''\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login Success</title>\n    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "LOGIN_LINK_TEMPLATE",
        "kind": 5,
        "importPath": "authLocalDev.app",
        "description": "authLocalDev.app",
        "peekOfCode": "LOGIN_LINK_TEMPLATE = '''\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login</title>\n    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>",
        "detail": "authLocalDev.app",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "authLogout.app",
        "description": "authLogout.app",
        "peekOfCode": "def logout():\n    # Get the token from the browser cookie access_token\n    token = request.cookies.get('access_token')\n    if not token:\n        return \"No access token found in cookies\", 400\n    # Define the token, token_type_hint, and client credentials\n    token_type_hint = \"access_token\"\n    client_id = \"\" ## enter your client ID\n    client_secret = \"\" ## enter your client secret\n    # Create the Authorization header with client credentials",
        "detail": "authLogout.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "authLogout.app",
        "description": "authLogout.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/', methods=['GET'])\ndef logout():\n    # Get the token from the browser cookie access_token\n    token = request.cookies.get('access_token')\n    if not token:\n        return \"No access token found in cookies\", 400\n    # Define the token, token_type_hint, and client credentials\n    token_type_hint = \"access_token\"\n    client_id = \"\" ## enter your client ID",
        "detail": "authLogout.app",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "authRefreshTokenGrant.generate_access_token",
        "description": "authRefreshTokenGrant.generate_access_token",
        "peekOfCode": "def make_request(url, headers, data):\n    try:\n        response = requests.post(url, headers=headers, data=data)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        if response:\n            print(f\"Status Code: {response.status_code}, Reason: {response.reason}\")\n        raise",
        "detail": "authRefreshTokenGrant.generate_access_token",
        "documentation": {}
    },
    {
        "label": "get_required_data",
        "kind": 2,
        "importPath": "authRefreshTokenGrant.generate_access_token",
        "description": "authRefreshTokenGrant.generate_access_token",
        "peekOfCode": "def get_required_data():\n    required_data = {}\n    required_keys = ['refresh_token', 'client_id', 'client_secret']\n    for key in required_keys:\n        required_data[key] = input(f\"Enter the value for {key}: \")\n    if not all(required_data.values()):\n        raise ValueError(\"All required data was not provided\")\n    return required_data\ndef main():\n    required_data = get_required_data()",
        "detail": "authRefreshTokenGrant.generate_access_token",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "authRefreshTokenGrant.generate_access_token",
        "description": "authRefreshTokenGrant.generate_access_token",
        "peekOfCode": "def main():\n    required_data = get_required_data()\n    # Base64 encode the client_id and client_secret\n    client_credentials = f\"{required_data['client_id']}:{required_data['client_secret']}\"\n    cc_base64 = base64.b64encode(client_credentials.encode()).decode()\n    headers = {\n        \"Accept\": \"application/json\",\n        \"Authorization\": f\"Basic {cc_base64}\"\n    }\n    data = {",
        "detail": "authRefreshTokenGrant.generate_access_token",
        "documentation": {}
    },
    {
        "label": "URL",
        "kind": 5,
        "importPath": "authRefreshTokenGrant.generate_access_token",
        "description": "authRefreshTokenGrant.generate_access_token",
        "peekOfCode": "URL = \"https://auth.eagleeyenetworks.com/oauth2/token\"\n# Function to make a POST request\ndef make_request(url, headers, data):\n    try:\n        response = requests.post(url, headers=headers, data=data)\n        response.raise_for_status()\n        return response.json()\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        if response:",
        "detail": "authRefreshTokenGrant.generate_access_token",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "def make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "get_tokens",
        "kind": 2,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "def get_tokens(code):\n    url = f\"{AUTH_URL}/oauth2/token?grant_type=authorization_code&scope=vms.all&code={code}&redirect_uri=http://{HOST_NAME}:{PORT}\"\n    return make_request(\"POST\", url, auth=(CLIENT_ID, CLIENT_SECRET))\ndef get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "get_base_url",
        "kind": 2,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "def get_base_url(accessToken):\n    url = f\"{BASE_URL}/api/v3.0/clientSettings\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    settings = make_request(\"GET\", url, headers=headers)\n    return settings.get('httpsBaseUrl', {}).get('hostname') if settings else None\ndef get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Route Handlers",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "get_user_details",
        "kind": 2,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "def get_user_details(accessToken, base_url):\n    url = f\"https://{base_url}/api/v3.0/users/self\"\n    headers = {\"accept\": \"application/json\", \"authorization\": f\"Bearer {accessToken}\"}\n    return make_request(\"GET\", url, headers=headers)\n# Route Handlers\n@app.route('/')\ndef index():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "def index():\n    code = request.args.get('code')\n    if code:\n        oauthObject = get_tokens(code)\n        accessToken = oauthObject.get('access_token') if oauthObject else None\n        base_url = get_base_url(accessToken) if accessToken else None\n        userDetails = get_user_details(accessToken, base_url) if base_url else None\n        userId = userDetails.get('email', 'unknown') if userDetails else 'unknown'\n        refresh_token = oauthObject.get('refresh_token', 'unknown') if oauthObject else 'unknown'\n        current_folder = os.path.dirname(os.path.abspath(__file__))",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "app = Flask(__name__)\n#### please note this is an example script ans should not be used in production ####\n#### If you are using this script in production, please make sure to use a secure method to store the client secret and client id ###\n#### This script is for educational purposes only ####\n#### not recommended for production use, please use a production server like wsgi ####\n# Constants\nHOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = \"\" #### Please enter your client id here ####\nCLIENT_SECRET =  \"\" #### Please enter your client secret here ####",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "HOST_NAME",
        "kind": 5,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "HOST_NAME = \"127.0.0.1\"\nPORT = 3333\nCLIENT_ID = \"\" #### Please enter your client id here ####\nCLIENT_SECRET =  \"\" #### Please enter your client secret here ####\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "PORT = 3333\nCLIENT_ID = \"\" #### Please enter your client id here ####\nCLIENT_SECRET =  \"\" #### Please enter your client secret here ####\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "CLIENT_ID",
        "kind": 5,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "CLIENT_ID = \"\" #### Please enter your client id here ####\nCLIENT_SECRET =  \"\" #### Please enter your client secret here ####\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "CLIENT_SECRET",
        "kind": 5,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "CLIENT_SECRET =  \"\" #### Please enter your client secret here ####\nAUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "AUTH_URL",
        "kind": 5,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "AUTH_URL = \"https://auth.eagleeyenetworks.com\"\nBASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "BASE_URL = \"https://api.eagleeyenetworks.com\"\n# Utility Functions\ndef make_request(method, url, headers=None, auth=None):\n    response = requests.request(method, url, headers=headers, auth=auth)\n    if response.status_code == 200:\n        return json.loads(response.text)\n    else:\n        return None\n# OAuth and User Details Handling\ndef get_tokens(code):",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "LOGIN_TEMPLATE",
        "kind": 5,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "LOGIN_TEMPLATE = '''\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login Success</title>\n    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "LOGIN_LINK_TEMPLATE",
        "kind": 5,
        "importPath": "authRefreshTokenGrant.generate_refresh_token",
        "description": "authRefreshTokenGrant.generate_refresh_token",
        "peekOfCode": "LOGIN_LINK_TEMPLATE = '''\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login</title>\n    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>",
        "detail": "authRefreshTokenGrant.generate_refresh_token",
        "documentation": {}
    },
    {
        "label": "EagleEyeNetworks",
        "kind": 6,
        "importPath": "authSwitchAccount.app",
        "description": "authSwitchAccount.app",
        "peekOfCode": "class EagleEyeNetworks:\n    def __init__(self):\n        # Initialize instance variables\n        self.access_token = os.getenv('ACCESS_TOKEN')\n        self.base_url = os.getenv('BASE_URL')\n        self.headers = {\n            \"accept\": \"application/json\",\n            \"content-type\": \"application/json\",\n            \"authorization\": f\"Bearer {self.access_token}\"\n        }",
        "detail": "authSwitchAccount.app",
        "documentation": {}
    },
    {
        "label": "clear_screen",
        "kind": 2,
        "importPath": "devicePTZKeyboardController.app",
        "description": "devicePTZKeyboardController.app",
        "peekOfCode": "def clear_screen():\n    # For Windows\n    if os.name == 'nt':\n        _ = os.system('cls')\n    # For Mac and Linux(here, os.name is 'posix')\n    else:\n        _ = os.system('clear')\n# Clear the screen at the start of the program.\nclear_screen()\nprint(\"PTZ Keyboard Control, checking for cameras...\")",
        "detail": "devicePTZKeyboardController.app",
        "documentation": {}
    },
    {
        "label": "clientsettings",
        "kind": 2,
        "importPath": "devicePTZKeyboardController.app",
        "description": "devicePTZKeyboardController.app",
        "peekOfCode": "def clientsettings():\n    with open('access_response.json') as user_file:\n        file_contents = json.load(user_file)\n        access_token = file_contents[\"access_token\"]\n        token_type = file_contents[\"token_type\"]\n        url = \"https://api.eagleeyenetworks.com/api/v3.0/clientSettings\"\n        headers = {\"accept\": \"application/json\",\n                    \"authorization\": token_type + access_token}\n        response = requests.get(url, headers=headers)\n        vmshostname = response.json()[\"httpsBaseUrl\"][\"hostname\"]",
        "detail": "devicePTZKeyboardController.app",
        "documentation": {}
    },
    {
        "label": "fetch_cameras",
        "kind": 2,
        "importPath": "devicePTZKeyboardController.app",
        "description": "devicePTZKeyboardController.app",
        "peekOfCode": "def fetch_cameras(token_type, access_token, vmshostname):\n    url = f\"https://{vmshostname}/api/v3.0/cameras?include=capabilities&pageSize=100\"\n    headers = {\"accept\": \"application/json\",\n                \"authorization\": f\"{token_type} {access_token}\"}\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        cameras = response.json().get(\"results\", [])\n        ptz_cameras = [cam for cam in cameras if cam[\"capabilities\"][\"ptz\"][\"capable\"] and \n                        cam[\"capabilities\"][\"ptz\"][\"panTilt\"] and \n                        cam[\"capabilities\"][\"ptz\"][\"zoom\"] and ",
        "detail": "devicePTZKeyboardController.app",
        "documentation": {}
    },
    {
        "label": "select_camera",
        "kind": 2,
        "importPath": "devicePTZKeyboardController.app",
        "description": "devicePTZKeyboardController.app",
        "peekOfCode": "def select_camera(cameras):\n    clear_screen()\n    print(\"Select a camera for PTZ control:\")\n    for i, cam in enumerate(cameras, start=1):\n        print(f\"{i}. {cam['name']}\")\n    choice = int(input(\"Enter the number of the camera: \")) - 1\n    clear_screen()\n    print(\"PTZ Keyboard Control\")\n    print(\"Control the camera with arrow keys for direction, Page Up for zoom in, and Page Down for zoom out.\")\n    return cameras[choice][\"id\"]",
        "detail": "devicePTZKeyboardController.app",
        "documentation": {}
    },
    {
        "label": "control_camera",
        "kind": 2,
        "importPath": "devicePTZKeyboardController.app",
        "description": "devicePTZKeyboardController.app",
        "peekOfCode": "def control_camera(camid, token_type, access_token, vmshostname):\n    global current_direction, control_thread_running\n    control_thread_running = True\n    while control_thread_running:\n        if current_direction:\n            url = f\"https://{vmshostname}/api/v3.0/cameras/{camid}/ptz/position\"\n            payload = {\n                \"direction\": [current_direction],\n                \"moveType\": \"direction\",\n                \"stepSize\": \"medium\"",
        "detail": "devicePTZKeyboardController.app",
        "documentation": {}
    },
    {
        "label": "on_press",
        "kind": 2,
        "importPath": "devicePTZKeyboardController.app",
        "description": "devicePTZKeyboardController.app",
        "peekOfCode": "def on_press(key):\n    global current_direction, control_thread, control_thread_running\n    key_id = getattr(key, 'name', getattr(key, 'char', None))\n    if key_id in ['left', 'right', 'up', 'down', 'page_up', 'page_down']:\n        current_direction = key_id\n# Key release event handler \ndef on_release(key):\n    global current_direction\n    key_id = getattr(key, 'name', getattr(key, 'char', None))\n    if key_id == current_direction:",
        "detail": "devicePTZKeyboardController.app",
        "documentation": {}
    },
    {
        "label": "on_release",
        "kind": 2,
        "importPath": "devicePTZKeyboardController.app",
        "description": "devicePTZKeyboardController.app",
        "peekOfCode": "def on_release(key):\n    global current_direction\n    key_id = getattr(key, 'name', getattr(key, 'char', None))\n    if key_id == current_direction:\n        current_direction = None\n# Main function\ndef main():\n    access_token, token_type, vmshostname = clientsettings()\n    ptz_cameras = fetch_cameras(token_type, access_token, vmshostname)\n    if ptz_cameras:",
        "detail": "devicePTZKeyboardController.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "devicePTZKeyboardController.app",
        "description": "devicePTZKeyboardController.app",
        "peekOfCode": "def main():\n    access_token, token_type, vmshostname = clientsettings()\n    ptz_cameras = fetch_cameras(token_type, access_token, vmshostname)\n    if ptz_cameras:\n        selected_cam_id = select_camera(ptz_cameras)\n        control_thread = threading.Thread(target=control_camera, args=(selected_cam_id, token_type, access_token, vmshostname))\n        control_thread.start()\n        with keyboard.Listener(on_press=on_press, on_release=on_release, suppress=True) as _listener:\n            _listener.join()\n        control_thread_running = False",
        "detail": "devicePTZKeyboardController.app",
        "documentation": {}
    },
    {
        "label": "current_direction",
        "kind": 5,
        "importPath": "devicePTZKeyboardController.app",
        "description": "devicePTZKeyboardController.app",
        "peekOfCode": "current_direction = None\ncontrol_thread_running = False\ncontrol_thread = None\ndef clear_screen():\n    # For Windows\n    if os.name == 'nt':\n        _ = os.system('cls')\n    # For Mac and Linux(here, os.name is 'posix')\n    else:\n        _ = os.system('clear')",
        "detail": "devicePTZKeyboardController.app",
        "documentation": {}
    },
    {
        "label": "control_thread_running",
        "kind": 5,
        "importPath": "devicePTZKeyboardController.app",
        "description": "devicePTZKeyboardController.app",
        "peekOfCode": "control_thread_running = False\ncontrol_thread = None\ndef clear_screen():\n    # For Windows\n    if os.name == 'nt':\n        _ = os.system('cls')\n    # For Mac and Linux(here, os.name is 'posix')\n    else:\n        _ = os.system('clear')\n# Clear the screen at the start of the program.",
        "detail": "devicePTZKeyboardController.app",
        "documentation": {}
    },
    {
        "label": "control_thread",
        "kind": 5,
        "importPath": "devicePTZKeyboardController.app",
        "description": "devicePTZKeyboardController.app",
        "peekOfCode": "control_thread = None\ndef clear_screen():\n    # For Windows\n    if os.name == 'nt':\n        _ = os.system('cls')\n    # For Mac and Linux(here, os.name is 'posix')\n    else:\n        _ = os.system('clear')\n# Clear the screen at the start of the program.\nclear_screen()",
        "detail": "devicePTZKeyboardController.app",
        "documentation": {}
    },
    {
        "label": "access_token",
        "kind": 5,
        "importPath": "eventsLPRevents.app",
        "description": "eventsLPRevents.app",
        "peekOfCode": "access_token = \"\"\nbase_url = \"\"\n# Configure logging\nlogging.basicConfig(filename='debug.log', level=logging.DEBUG, format='%(asctime)s - %(message)s')\nprint (\"Eagle Eye Networks - License Plate Recognition - Events Endpoint\")\nbase_url = f\"https://{base_url}/api/v3.0/lprEvents\"\nparams = {\n    \"timestamp__gte\": \"20240409143000.000\",\n    \"timestamp__lte\": \"20240422141500.000\",\n    \"pageSize\": \"100\",",
        "detail": "eventsLPRevents.app",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "eventsLPRevents.app",
        "description": "eventsLPRevents.app",
        "peekOfCode": "base_url = \"\"\n# Configure logging\nlogging.basicConfig(filename='debug.log', level=logging.DEBUG, format='%(asctime)s - %(message)s')\nprint (\"Eagle Eye Networks - License Plate Recognition - Events Endpoint\")\nbase_url = f\"https://{base_url}/api/v3.0/lprEvents\"\nparams = {\n    \"timestamp__gte\": \"20240409143000.000\",\n    \"timestamp__lte\": \"20240422141500.000\",\n    \"pageSize\": \"100\",\n    \"include\": \"data.een.lprDetection.v1\",",
        "detail": "eventsLPRevents.app",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "eventsLPRevents.app",
        "description": "eventsLPRevents.app",
        "peekOfCode": "base_url = f\"https://{base_url}/api/v3.0/lprEvents\"\nparams = {\n    \"timestamp__gte\": \"20240409143000.000\",\n    \"timestamp__lte\": \"20240422141500.000\",\n    \"pageSize\": \"100\",\n    \"include\": \"data.een.lprDetection.v1\",\n    \"pageToken\": None\n}\nheaders = {\n    \"accept\": \"application/json\",",
        "detail": "eventsLPRevents.app",
        "documentation": {}
    },
    {
        "label": "params",
        "kind": 5,
        "importPath": "eventsLPRevents.app",
        "description": "eventsLPRevents.app",
        "peekOfCode": "params = {\n    \"timestamp__gte\": \"20240409143000.000\",\n    \"timestamp__lte\": \"20240422141500.000\",\n    \"pageSize\": \"100\",\n    \"include\": \"data.een.lprDetection.v1\",\n    \"pageToken\": None\n}\nheaders = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\"",
        "detail": "eventsLPRevents.app",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "eventsLPRevents.app",
        "description": "eventsLPRevents.app",
        "peekOfCode": "headers = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\"\n}\noutput_file = open(\"output.log\", \"w\")\nevent_count = 0\nplate_set = set()\nentry_count = 0\nexit_count = 0\nwhile True:",
        "detail": "eventsLPRevents.app",
        "documentation": {}
    },
    {
        "label": "output_file",
        "kind": 5,
        "importPath": "eventsLPRevents.app",
        "description": "eventsLPRevents.app",
        "peekOfCode": "output_file = open(\"output.log\", \"w\")\nevent_count = 0\nplate_set = set()\nentry_count = 0\nexit_count = 0\nwhile True:\n    # Log the request URL\n    logging.debug(f\"Request URL: {base_url} with parameters: {params}\")\n    response = requests.get(base_url, headers=headers, params=params)\n    data = response.json()",
        "detail": "eventsLPRevents.app",
        "documentation": {}
    },
    {
        "label": "event_count",
        "kind": 5,
        "importPath": "eventsLPRevents.app",
        "description": "eventsLPRevents.app",
        "peekOfCode": "event_count = 0\nplate_set = set()\nentry_count = 0\nexit_count = 0\nwhile True:\n    # Log the request URL\n    logging.debug(f\"Request URL: {base_url} with parameters: {params}\")\n    response = requests.get(base_url, headers=headers, params=params)\n    data = response.json()\n    output_file.write(json.dumps(data, indent=4))",
        "detail": "eventsLPRevents.app",
        "documentation": {}
    },
    {
        "label": "plate_set",
        "kind": 5,
        "importPath": "eventsLPRevents.app",
        "description": "eventsLPRevents.app",
        "peekOfCode": "plate_set = set()\nentry_count = 0\nexit_count = 0\nwhile True:\n    # Log the request URL\n    logging.debug(f\"Request URL: {base_url} with parameters: {params}\")\n    response = requests.get(base_url, headers=headers, params=params)\n    data = response.json()\n    output_file.write(json.dumps(data, indent=4))\n    output_file.write(\"\\n\")",
        "detail": "eventsLPRevents.app",
        "documentation": {}
    },
    {
        "label": "entry_count",
        "kind": 5,
        "importPath": "eventsLPRevents.app",
        "description": "eventsLPRevents.app",
        "peekOfCode": "entry_count = 0\nexit_count = 0\nwhile True:\n    # Log the request URL\n    logging.debug(f\"Request URL: {base_url} with parameters: {params}\")\n    response = requests.get(base_url, headers=headers, params=params)\n    data = response.json()\n    output_file.write(json.dumps(data, indent=4))\n    output_file.write(\"\\n\")\n    nextPageToken = data.get(\"nextPageToken\")",
        "detail": "eventsLPRevents.app",
        "documentation": {}
    },
    {
        "label": "exit_count",
        "kind": 5,
        "importPath": "eventsLPRevents.app",
        "description": "eventsLPRevents.app",
        "peekOfCode": "exit_count = 0\nwhile True:\n    # Log the request URL\n    logging.debug(f\"Request URL: {base_url} with parameters: {params}\")\n    response = requests.get(base_url, headers=headers, params=params)\n    data = response.json()\n    output_file.write(json.dumps(data, indent=4))\n    output_file.write(\"\\n\")\n    nextPageToken = data.get(\"nextPageToken\")\n    if nextPageToken is not None:  # Check if nextPageToken is None explicitly",
        "detail": "eventsLPRevents.app",
        "documentation": {}
    },
    {
        "label": "start_script_time",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "start_script_time = time.time()  # Measure the start time of the script\nTIMESTAMP_FORMAT0 = \"%3A\"\nTIMESTAMP_FORMAT1 = \"%2B\"\naccess_token = \"\"\ntoken_type = \"Bearer\"\nactorId = \"camera:XXXXXX\"\nbaseUrl = \"api.cXXX.eagleeyenetworks.com\"\nevent_types = [\n    \"een.deviceCloudStatusUpdateEvent.v1\",\n    \"een.motionDetectionEvent.v1\",",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT0",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "TIMESTAMP_FORMAT0 = \"%3A\"\nTIMESTAMP_FORMAT1 = \"%2B\"\naccess_token = \"\"\ntoken_type = \"Bearer\"\nactorId = \"camera:XXXXXX\"\nbaseUrl = \"api.cXXX.eagleeyenetworks.com\"\nevent_types = [\n    \"een.deviceCloudStatusUpdateEvent.v1\",\n    \"een.motionDetectionEvent.v1\",\n    \"een.lprPlateReadEvent.v1\",",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT1",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "TIMESTAMP_FORMAT1 = \"%2B\"\naccess_token = \"\"\ntoken_type = \"Bearer\"\nactorId = \"camera:XXXXXX\"\nbaseUrl = \"api.cXXX.eagleeyenetworks.com\"\nevent_types = [\n    \"een.deviceCloudStatusUpdateEvent.v1\",\n    \"een.motionDetectionEvent.v1\",\n    \"een.lprPlateReadEvent.v1\",\n    \"een.tamperDetectionEvent.v1\",",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "access_token",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "access_token = \"\"\ntoken_type = \"Bearer\"\nactorId = \"camera:XXXXXX\"\nbaseUrl = \"api.cXXX.eagleeyenetworks.com\"\nevent_types = [\n    \"een.deviceCloudStatusUpdateEvent.v1\",\n    \"een.motionDetectionEvent.v1\",\n    \"een.lprPlateReadEvent.v1\",\n    \"een.tamperDetectionEvent.v1\",\n    \"een.objectIntrusionEvent.v1\",",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "token_type",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "token_type = \"Bearer\"\nactorId = \"camera:XXXXXX\"\nbaseUrl = \"api.cXXX.eagleeyenetworks.com\"\nevent_types = [\n    \"een.deviceCloudStatusUpdateEvent.v1\",\n    \"een.motionDetectionEvent.v1\",\n    \"een.lprPlateReadEvent.v1\",\n    \"een.tamperDetectionEvent.v1\",\n    \"een.objectIntrusionEvent.v1\",\n    \"een.objectLineCrossEvent.v1\",",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "actorId",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "actorId = \"camera:XXXXXX\"\nbaseUrl = \"api.cXXX.eagleeyenetworks.com\"\nevent_types = [\n    \"een.deviceCloudStatusUpdateEvent.v1\",\n    \"een.motionDetectionEvent.v1\",\n    \"een.lprPlateReadEvent.v1\",\n    \"een.tamperDetectionEvent.v1\",\n    \"een.objectIntrusionEvent.v1\",\n    \"een.objectLineCrossEvent.v1\",\n    \"een.loiterDetectionEvent.v1\"",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "baseUrl",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "baseUrl = \"api.cXXX.eagleeyenetworks.com\"\nevent_types = [\n    \"een.deviceCloudStatusUpdateEvent.v1\",\n    \"een.motionDetectionEvent.v1\",\n    \"een.lprPlateReadEvent.v1\",\n    \"een.tamperDetectionEvent.v1\",\n    \"een.objectIntrusionEvent.v1\",\n    \"een.objectLineCrossEvent.v1\",\n    \"een.loiterDetectionEvent.v1\"\n]",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "event_types",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "event_types = [\n    \"een.deviceCloudStatusUpdateEvent.v1\",\n    \"een.motionDetectionEvent.v1\",\n    \"een.lprPlateReadEvent.v1\",\n    \"een.tamperDetectionEvent.v1\",\n    \"een.objectIntrusionEvent.v1\",\n    \"een.objectLineCrossEvent.v1\",\n    \"een.loiterDetectionEvent.v1\"\n]\npageSize = \"pageSize=50000\"",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "pageSize",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "pageSize = \"pageSize=50000\"\ndate = \"2024-01-20\"\nunencoded_startTimestamp = f\"{date}T00:00:00.000+00:00\"\nunencoded_endTimestamp = f\"{date}T23:59:59.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nprint(unencoded_startTimestamp, \"to\", unencoded_endTimestamp)\nheaders = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\"",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "date",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "date = \"2024-01-20\"\nunencoded_startTimestamp = f\"{date}T00:00:00.000+00:00\"\nunencoded_endTimestamp = f\"{date}T23:59:59.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nprint(unencoded_startTimestamp, \"to\", unencoded_endTimestamp)\nheaders = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\"\n}",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "unencoded_startTimestamp",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "unencoded_startTimestamp = f\"{date}T00:00:00.000+00:00\"\nunencoded_endTimestamp = f\"{date}T23:59:59.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nprint(unencoded_startTimestamp, \"to\", unencoded_endTimestamp)\nheaders = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\"\n}\nfor event_type in event_types:",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "unencoded_endTimestamp",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "unencoded_endTimestamp = f\"{date}T23:59:59.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nprint(unencoded_startTimestamp, \"to\", unencoded_endTimestamp)\nheaders = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\"\n}\nfor event_type in event_types:\n    typeIn = event_type",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "startTimestamp",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "startTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nprint(unencoded_startTimestamp, \"to\", unencoded_endTimestamp)\nheaders = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\"\n}\nfor event_type in event_types:\n    typeIn = event_type\n    url = f\"https://{baseUrl}/api/v3.0/events?{pageSize}&startTimestamp__gte={startTimestamp}&endTimestamp__lte={endTimestamp}&actor={actorId}&type__in={typeIn}\"",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "endTimestamp",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "endTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nprint(unencoded_startTimestamp, \"to\", unencoded_endTimestamp)\nheaders = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\"\n}\nfor event_type in event_types:\n    typeIn = event_type\n    url = f\"https://{baseUrl}/api/v3.0/events?{pageSize}&startTimestamp__gte={startTimestamp}&endTimestamp__lte={endTimestamp}&actor={actorId}&type__in={typeIn}\"\n    request_times = []  # List to store request times",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "headers = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\"\n}\nfor event_type in event_types:\n    typeIn = event_type\n    url = f\"https://{baseUrl}/api/v3.0/events?{pageSize}&startTimestamp__gte={startTimestamp}&endTimestamp__lte={endTimestamp}&actor={actorId}&type__in={typeIn}\"\n    request_times = []  # List to store request times\n    for i in range(10):\n        start_time = time.time()  # Initialize start_time before calculating request time",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "end_script_time",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "end_script_time = time.time()  # Measure the end time of the script\ntotal_script_time = end_script_time - start_script_time  # Calculate the total script time\nprint(f\"Total script time: {total_script_time} seconds\")",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "total_script_time",
        "kind": 5,
        "importPath": "eventsRequestTimer.app",
        "description": "eventsRequestTimer.app",
        "peekOfCode": "total_script_time = end_script_time - start_script_time  # Calculate the total script time\nprint(f\"Total script time: {total_script_time} seconds\")",
        "detail": "eventsRequestTimer.app",
        "documentation": {}
    },
    {
        "label": "refresh_access_token",
        "kind": 2,
        "importPath": "iframeMonitor.app",
        "description": "iframeMonitor.app",
        "peekOfCode": "def refresh_access_token():\n    global access_token  # Allow the function to modify the global variable\n    url = \"https://auth.eagleeyenetworks.com/oauth2/token\"\n    # Get refresh token and authorization header from environment\n    refresh_token = \"\"\n    auth_header = \"\"\n    print(f\"Refresh Token: {refresh_token}\")\n    print(f\"Authorization Header: {auth_header}\")\n    payload = f'grant_type=refresh_token&refresh_token={refresh_token}'\n    headers = {",
        "detail": "iframeMonitor.app",
        "documentation": {}
    },
    {
        "label": "schedule_token_refresh",
        "kind": 2,
        "importPath": "iframeMonitor.app",
        "description": "iframeMonitor.app",
        "peekOfCode": "def schedule_token_refresh():\n    while True:\n        refresh_access_token()\n        # Wait for 12 hours before refreshing again\n        sleep(12 * 3600)\n# Flask route to serve the access token to the template\n@app.route('/', methods=['GET'])\ndef index():\n    # Check if access_token exists and is valid\n    if access_token:",
        "detail": "iframeMonitor.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "iframeMonitor.app",
        "description": "iframeMonitor.app",
        "peekOfCode": "def index():\n    # Check if access_token exists and is valid\n    if access_token:\n        # Create a response to render the template\n        response = make_response(render_template('index.html'))\n        # Set the access token as a cookie\n        response.set_cookie('access_token', access_token)\n        return response\n    else:\n        # Token is not available, trigger a refresh and try again",
        "detail": "iframeMonitor.app",
        "documentation": {}
    },
    {
        "label": "start_refresh_thread",
        "kind": 2,
        "importPath": "iframeMonitor.app",
        "description": "iframeMonitor.app",
        "peekOfCode": "def start_refresh_thread():\n    # Refresh the token immediately to ensure it's available\n    refresh_access_token()\n    # Then start the periodic token refresh thread\n    refresh_thread = threading.Thread(target=schedule_token_refresh)\n    refresh_thread.daemon = True  # Daemonize thread to shut down with the program\n    refresh_thread.start()\nif __name__ == '__main__':\n    # Start the token refresh thread\n    start_refresh_thread()",
        "detail": "iframeMonitor.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "iframeMonitor.app",
        "description": "iframeMonitor.app",
        "peekOfCode": "app = Flask(__name__)\n# In-memory variable to store the access token\naccess_token = None\n# Function to request a new access token using refresh token\ndef refresh_access_token():\n    global access_token  # Allow the function to modify the global variable\n    url = \"https://auth.eagleeyenetworks.com/oauth2/token\"\n    # Get refresh token and authorization header from environment\n    refresh_token = \"\"\n    auth_header = \"\"",
        "detail": "iframeMonitor.app",
        "documentation": {}
    },
    {
        "label": "access_token",
        "kind": 5,
        "importPath": "iframeMonitor.app",
        "description": "iframeMonitor.app",
        "peekOfCode": "access_token = None\n# Function to request a new access token using refresh token\ndef refresh_access_token():\n    global access_token  # Allow the function to modify the global variable\n    url = \"https://auth.eagleeyenetworks.com/oauth2/token\"\n    # Get refresh token and authorization header from environment\n    refresh_token = \"\"\n    auth_header = \"\"\n    print(f\"Refresh Token: {refresh_token}\")\n    print(f\"Authorization Header: {auth_header}\")",
        "detail": "iframeMonitor.app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "iframeMulti.app",
        "description": "iframeMulti.app",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')",
        "detail": "iframeMulti.app",
        "documentation": {}
    },
    {
        "label": "live",
        "kind": 2,
        "importPath": "iframeMulti.app",
        "description": "iframeMulti.app",
        "peekOfCode": "def live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('live.html', access_token=access_token, camera_id=camera_id)\n@app.route('/history', methods=['GET', 'POST'])\ndef history():",
        "detail": "iframeMulti.app",
        "documentation": {}
    },
    {
        "label": "history",
        "kind": 2,
        "importPath": "iframeMulti.app",
        "description": "iframeMulti.app",
        "peekOfCode": "def history():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('history.html', access_token=access_token, camera_id=camera_id)\n@app.route('/historylive', methods=['GET', 'POST'])\ndef historylive():",
        "detail": "iframeMulti.app",
        "documentation": {}
    },
    {
        "label": "historylive",
        "kind": 2,
        "importPath": "iframeMulti.app",
        "description": "iframeMulti.app",
        "peekOfCode": "def historylive():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests\n        access_token = request.args.get('access_token')\n        camera_id = request.args.get('camera_id')\n    return render_template('historylive.html', access_token=access_token, camera_id=camera_id)\nif __name__ == '__main__':\n    app.run(debug=True, port=3333)",
        "detail": "iframeMulti.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "iframeMulti.app",
        "description": "iframeMulti.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\n@app.route('/live', methods=['GET', 'POST'])\ndef live():\n    if request.method == 'POST':\n        access_token = request.form.get('access_token')\n        camera_id = request.form.get('camera_id')\n    else:  # This will handle GET requests",
        "detail": "iframeMulti.app",
        "documentation": {}
    },
    {
        "label": "access_token",
        "kind": 5,
        "importPath": "mediaAudioPushHttps.audiopush",
        "description": "mediaAudioPushHttps.audiopush",
        "peekOfCode": "access_token = \"\"\ncameraId = \"\"\nprint(\"sending audio to server...\")\nurl = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:",
        "detail": "mediaAudioPushHttps.audiopush",
        "documentation": {}
    },
    {
        "label": "cameraId",
        "kind": 5,
        "importPath": "mediaAudioPushHttps.audiopush",
        "description": "mediaAudioPushHttps.audiopush",
        "peekOfCode": "cameraId = \"\"\nprint(\"sending audio to server...\")\nurl = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {",
        "detail": "mediaAudioPushHttps.audiopush",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": "mediaAudioPushHttps.audiopush",
        "description": "mediaAudioPushHttps.audiopush",
        "peekOfCode": "url = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\nheaders = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {\n    'data': ('rubberdukky.raw', open('rubberdukky.raw', 'rb'), 'audio/wav')\n}",
        "detail": "mediaAudioPushHttps.audiopush",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "mediaAudioPushHttps.audiopush",
        "description": "mediaAudioPushHttps.audiopush",
        "peekOfCode": "headers = {\n    'accept': '*/*',\n    'Content-Type': 'multipart/form-data',\n    'authorization': 'Bearer ' + access_token\n    }\n# select filed to be send:\nfiles = {\n    'data': ('rubberdukky.raw', open('rubberdukky.raw', 'rb'), 'audio/wav')\n}\n# making the actual request:",
        "detail": "mediaAudioPushHttps.audiopush",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": "mediaAudioPushHttps.audiopush",
        "description": "mediaAudioPushHttps.audiopush",
        "peekOfCode": "files = {\n    'data': ('rubberdukky.raw', open('rubberdukky.raw', 'rb'), 'audio/wav')\n}\n# making the actual request:\nresponse = requests.post(url, headers=headers, files=files)\nprint (\"audio sent successfully\",response.status_code)",
        "detail": "mediaAudioPushHttps.audiopush",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "mediaAudioPushHttps.audiopush",
        "description": "mediaAudioPushHttps.audiopush",
        "peekOfCode": "response = requests.post(url, headers=headers, files=files)\nprint (\"audio sent successfully\",response.status_code)",
        "detail": "mediaAudioPushHttps.audiopush",
        "documentation": {}
    },
    {
        "label": "clear_terminal",
        "kind": 2,
        "importPath": "mediaAudioPushHttps.audiopushmictest",
        "description": "mediaAudioPushHttps.audiopushmictest",
        "peekOfCode": "def clear_terminal():\n    \"\"\"\n    Clear the terminal.\n    \"\"\"\n    os.system('cls' if os.name == 'nt' else 'clear')\ndef record_audio(duration, fs=8000):\n    \"\"\"\n    Record audio from the microphone.\n    \"\"\"\n    print(f\"Recording {duration} seconds of audio...\")",
        "detail": "mediaAudioPushHttps.audiopushmictest",
        "documentation": {}
    },
    {
        "label": "record_audio",
        "kind": 2,
        "importPath": "mediaAudioPushHttps.audiopushmictest",
        "description": "mediaAudioPushHttps.audiopushmictest",
        "peekOfCode": "def record_audio(duration, fs=8000):\n    \"\"\"\n    Record audio from the microphone.\n    \"\"\"\n    print(f\"Recording {duration} seconds of audio...\")\n    recording = sd.rec(int(duration * fs), samplerate=fs, channels=1, dtype='int16')\n    sd.wait()\n    print(\"Recording complete.\")\n    return recording\ndef encode_alaw(audio_data):",
        "detail": "mediaAudioPushHttps.audiopushmictest",
        "documentation": {}
    },
    {
        "label": "encode_alaw",
        "kind": 2,
        "importPath": "mediaAudioPushHttps.audiopushmictest",
        "description": "mediaAudioPushHttps.audiopushmictest",
        "peekOfCode": "def encode_alaw(audio_data):\n    \"\"\"\n    Encode audio data to A-law.\n    \"\"\"\n    print(\"Encoding audio to A-law...\")\n    audio_bytes = audio_data.tobytes()\n    alaw_data = audioop.lin2alaw(audio_bytes, 2)\n    print(\"Encoding complete.\")\n    return alaw_data\ndef send_audio(encoded_audio, url, access_token):",
        "detail": "mediaAudioPushHttps.audiopushmictest",
        "documentation": {}
    },
    {
        "label": "send_audio",
        "kind": 2,
        "importPath": "mediaAudioPushHttps.audiopushmictest",
        "description": "mediaAudioPushHttps.audiopushmictest",
        "peekOfCode": "def send_audio(encoded_audio, url, access_token):\n    \"\"\"\n    Send encoded audio via HTTPS POST request using in-memory file.\n    \"\"\"\n    print(\"Sending audio to server...\")\n    headers = {\n        'accept': '*/*',\n        'Authorization': f'Bearer {access_token}',\n        'Content-Type': 'multipart/form-data',\n    }",
        "detail": "mediaAudioPushHttps.audiopushmictest",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mediaAudioPushHttps.audiopushmictest",
        "description": "mediaAudioPushHttps.audiopushmictest",
        "peekOfCode": "def main():\n    # Clear the terminal\n    clear_terminal()\n    # Authenticate and set up\n    url = f'https://media.c001.eagleeyenetworks.com:443/media/streams/audio/{cameraId}/alaw'\n    # Record, encode, and send the audio\n    audio_data = record_audio(duration=5)  # 5 seconds of audio\n    encoded_audio = encode_alaw(audio_data)\n    send_audio(encoded_audio, url, access_token)\nif __name__ == \"__main__\":",
        "detail": "mediaAudioPushHttps.audiopushmictest",
        "documentation": {}
    },
    {
        "label": "access_token",
        "kind": 5,
        "importPath": "mediaAudioPushHttps.audiopushmictest",
        "description": "mediaAudioPushHttps.audiopushmictest",
        "peekOfCode": "access_token = \"\"\ncameraId = \"\"\ndef clear_terminal():\n    \"\"\"\n    Clear the terminal.\n    \"\"\"\n    os.system('cls' if os.name == 'nt' else 'clear')\ndef record_audio(duration, fs=8000):\n    \"\"\"\n    Record audio from the microphone.",
        "detail": "mediaAudioPushHttps.audiopushmictest",
        "documentation": {}
    },
    {
        "label": "cameraId",
        "kind": 5,
        "importPath": "mediaAudioPushHttps.audiopushmictest",
        "description": "mediaAudioPushHttps.audiopushmictest",
        "peekOfCode": "cameraId = \"\"\ndef clear_terminal():\n    \"\"\"\n    Clear the terminal.\n    \"\"\"\n    os.system('cls' if os.name == 'nt' else 'clear')\ndef record_audio(duration, fs=8000):\n    \"\"\"\n    Record audio from the microphone.\n    \"\"\"",
        "detail": "mediaAudioPushHttps.audiopushmictest",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "mediaCookie.app",
        "description": "mediaCookie.app",
        "peekOfCode": "def index():\n    return render_template('index.html')\nif __name__ == '__main__':\n    app.run(host='127.0.0.1', port=3333)",
        "detail": "mediaCookie.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "mediaCookie.app",
        "description": "mediaCookie.app",
        "peekOfCode": "app = Flask(__name__)\n@app.route('/')\ndef index():\n    return render_template('index.html')\nif __name__ == '__main__':\n    app.run(host='127.0.0.1', port=3333)",
        "detail": "mediaCookie.app",
        "documentation": {}
    },
    {
        "label": "clientsettings",
        "kind": 2,
        "importPath": "mediaFfplayer.app",
        "description": "mediaFfplayer.app",
        "peekOfCode": "def clientsettings():\n    camid = \"ESN\"\n    with open('access_response.json') as user_file:\n        file_contents = json.load(user_file)\n        access_token = file_contents[\"access_token\"]\n        token_type = file_contents[\"token_type\"]\n        url = \"https://api.eagleeyenetworks.com/api/v3.0/clientSettings\"\n        headers = {\"accept\": \"application/json\",\n                    \"authorization\": token_type + access_token\n                    }",
        "detail": "mediaFfplayer.app",
        "documentation": {}
    },
    {
        "label": "getcamsettings",
        "kind": 2,
        "importPath": "mediaFfplayer.app",
        "description": "mediaFfplayer.app",
        "peekOfCode": "def getcamsettings():\n        ## request cameras ##        \n        access_token, token_type, httpsBaseURL, camid = clientsettings()\n        url = \"https://\" + httpsBaseURL + \"/api/v3.0/cameras/\" + camid\n        headers = {\"accept\": \"application/json\",\n                    \"authorization\": token_type +  ' ' +access_token\n                    }\n        getcam = requests.get(url, headers=headers)\n        print(\"Get camerasettings\", getcam.status_code)\n        print(httpsBaseURL)",
        "detail": "mediaFfplayer.app",
        "documentation": {}
    },
    {
        "label": "getfeeds",
        "kind": 2,
        "importPath": "mediaFfplayer.app",
        "description": "mediaFfplayer.app",
        "peekOfCode": "def getfeeds():\n        ## request cameras ##        \n        access_token, token_type, httpsBaseURL, camid = clientsettings()\n        url = \"https://\" + httpsBaseURL + \"/api/v3.0/feeds?deviceId=\" + camid + \"&type=main&include=flvUrl&include=rtspUrl&include=rtspsUrl&include=hlsUrl&include=multipartUrl&include=webRtcUrl&pageSize=100\"\n        headers = {\"accept\": \"application/json\",\n                    \"authorization\": token_type +  ' ' +access_token\n                    }\n        getfeeds = requests.get(url, headers=headers)\n        data = json.loads(getfeeds.text)\n        print(\"Loading Camera Feeds\", getfeeds.status_code)",
        "detail": "mediaFfplayer.app",
        "documentation": {}
    },
    {
        "label": "print_menu",
        "kind": 2,
        "importPath": "mediaFfplayer.app",
        "description": "mediaFfplayer.app",
        "peekOfCode": "def print_menu():\n    # Display menu with streaming protocol options\n    print(\"Select an option (enter the corresponding number):\")\n    print(\"1- Multipart preview\")\n    print(\"2- Multipart full\")\n    print(\"3 - RTSP Over TCP\")\n    print(\"4 - RTSP Over UDP\")\n    print(\"5 - RTSPS\")\n    print(\"6 - HLS\")\n    print(\"7 - FLV\")",
        "detail": "mediaFfplayer.app",
        "documentation": {}
    },
    {
        "label": "execute_command",
        "kind": 2,
        "importPath": "mediaFfplayer.app",
        "description": "mediaFfplayer.app",
        "peekOfCode": "def execute_command(choice, token, url):\n    # Execute the appropriate FFplay command based on user's choice\n    commands = [\n        \"ffplay -headers \\\"Authorization: Bearer {1}\\\" \\\"{0}\\\"\",\n        \"ffplay -headers \\\"Authorization: Bearer {1}\\\" -f h264 \\\"{0}&flavor=ffmpeg\\\"\",\n        \"ffplay -rtsp_transport tcp \\\"{}&access_token={}\\\"\",\n        \"ffplay -rtsp_transport udp \\\"{}&access_token={}\\\"\",\n        \"ffplay \\\"{}&access_token={}\\\"\",\n        \"ffplay -headers \\\"Authorization: Bearer {1}\\\" \\\"{0}\\\"\",\n        \"ffplay -headers \\\"Authorization: Bearer {1}\\\" \\\"{0}\\\"\",",
        "detail": "mediaFfplayer.app",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mediaFfplayer.app",
        "description": "mediaFfplayer.app",
        "peekOfCode": "def main():\n    access_token, token_type, httpsBaseURL, camid = clientsettings()\n    flvUrl, rtspUrl, rtspsUrl, hlsUrl, multipart = getfeeds()\n    # Main loop: display menu, take input, execute command or exit\n    while True:\n        print_menu()\n        choice = int(input())\n        if choice == 0:\n            break\n        elif choice == 1:",
        "detail": "mediaFfplayer.app",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "def make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        exit(1)\n    return response\ndef clientsettings():\n    url = \"https://api.eagleeyenetworks.com/api/v3.0/clientSettings\"",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "clientsettings",
        "kind": 2,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "def clientsettings():\n    url = \"https://api.eagleeyenetworks.com/api/v3.0/clientSettings\"\n    response = make_request(url)\n    return response.json()[\"httpsBaseUrl\"][\"hostname\"]\nbaseUrl = clientsettings()\ndef get_session_response(base_url):\n    session_url = f\"https://{base_url}/api/v3.0/media/session\"\n    return make_request(session_url)\nsession_response = get_session_response(baseUrl)\ndef download_mp4(mp4_url, file_name):",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "get_session_response",
        "kind": 2,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "def get_session_response(base_url):\n    session_url = f\"https://{base_url}/api/v3.0/media/session\"\n    return make_request(session_url)\nsession_response = get_session_response(baseUrl)\ndef download_mp4(mp4_url, file_name):\n    try:\n        mp4_response = session.get(mp4_url, stream=True)\n        mp4_response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        total_size = int(mp4_response.headers.get('content-length', 0))",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "download_mp4",
        "kind": 2,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "def download_mp4(mp4_url, file_name):\n    try:\n        mp4_response = session.get(mp4_url, stream=True)\n        mp4_response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        total_size = int(mp4_response.headers.get('content-length', 0))\n        with open(file_path, \"wb\") as mp4_file, tqdm(\n            desc=file_name,\n            total=total_size,\n            unit='B',",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "download_all_mp4_urls",
        "kind": 2,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "def download_all_mp4_urls(results):\n    for result in results:\n        mp4_url = result[\"mp4Url\"]\n        startTimestamp = result[\"startTimestamp\"].replace(\"%3A\", \":\")\n        endTimestamp = result[\"endTimestamp\"].replace(\"%3A\", \":\")\n        file_name = f\"{deviceId}_{startTimestamp}_{endTimestamp}_output.mp4\"\n        download_mp4(mp4_url, file_name)\ndef main():\n    url = f\"https://{baseUrl}/api/v3.0/media?deviceId={deviceId}&type=main&mediaType=video&startTimestamp__gte={startTimestamp}&endTimestamp__lte={endTimestamp}&coalesce=true&include=mp4Url&pageSize=100\"\n    response = make_request(url)",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "def main():\n    url = f\"https://{baseUrl}/api/v3.0/media?deviceId={deviceId}&type=main&mediaType=video&startTimestamp__gte={startTimestamp}&endTimestamp__lte={endTimestamp}&coalesce=true&include=mp4Url&pageSize=100\"\n    response = make_request(url)\n    if response.status_code == 200:\n        data = json.loads(response.text)\n        results = data[\"results\"]\n        download_all_mp4_urls(results)\n    else:\n        print(\"Failed to get MP4 URLs from the API\")\n        print(response.status_code)",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT0",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "TIMESTAMP_FORMAT0 = \"%3A\"\nTIMESTAMP_FORMAT1 = \"%2B\"\nOUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        file_contents = json.load(user_file)\n        access_token = file_contents[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT1",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "TIMESTAMP_FORMAT1 = \"%2B\"\nOUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        file_contents = json.load(user_file)\n        access_token = file_contents[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")\n    exit(1)",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "OUTPUT_FOLDER",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "OUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        file_contents = json.load(user_file)\n        access_token = file_contents[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")\n    exit(1)\n# Headers",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "headers = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\",\n}\n# Session\nsession = requests.Session()\nsession.headers.update(headers)\n# Ensure the output folder exists\nif not os.path.exists(OUTPUT_FOLDER):\n    os.makedirs(OUTPUT_FOLDER)",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "session = requests.Session()\nsession.headers.update(headers)\n# Ensure the output folder exists\nif not os.path.exists(OUTPUT_FOLDER):\n    os.makedirs(OUTPUT_FOLDER)\n# Device ID and timestamps\ndeviceId = \"1001e90f\"\nunencoded_startTimestamp = \"2023-11-05T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-07T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "deviceId",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "deviceId = \"1001e90f\"\nunencoded_startTimestamp = \"2023-11-05T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-07T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "unencoded_startTimestamp",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "unencoded_startTimestamp = \"2023-11-05T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-07T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "unencoded_endTimestamp",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "unencoded_endTimestamp = \"2023-11-07T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        exit(1)",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "startTimestamp",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "startTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        exit(1)\n    return response",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "endTimestamp",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "endTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        exit(1)\n    return response\ndef clientsettings():",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "baseUrl",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "baseUrl = clientsettings()\ndef get_session_response(base_url):\n    session_url = f\"https://{base_url}/api/v3.0/media/session\"\n    return make_request(session_url)\nsession_response = get_session_response(baseUrl)\ndef download_mp4(mp4_url, file_name):\n    try:\n        mp4_response = session.get(mp4_url, stream=True)\n        mp4_response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "session_response",
        "kind": 5,
        "importPath": "mediaMp4Download.api3_mp4_dl",
        "description": "mediaMp4Download.api3_mp4_dl",
        "peekOfCode": "session_response = get_session_response(baseUrl)\ndef download_mp4(mp4_url, file_name):\n    try:\n        mp4_response = session.get(mp4_url, stream=True)\n        mp4_response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        total_size = int(mp4_response.headers.get('content-length', 0))\n        with open(file_path, \"wb\") as mp4_file, tqdm(\n            desc=file_name,\n            total=total_size,",
        "detail": "mediaMp4Download.api3_mp4_dl",
        "documentation": {}
    },
    {
        "label": "download_mp4",
        "kind": 2,
        "importPath": "mediaMp4Download.mp4_dl_all_mp4dl",
        "description": "mediaMp4Download.mp4_dl_all_mp4dl",
        "peekOfCode": "def download_mp4(mp4_url, file_name):\n    try:\n        mp4_response = session.get(mp4_url)\n        mp4_response.raise_for_status()\n        file_path = os.path.join(output_folder, file_name)\n        with open(file_path, \"wb\") as mp4_file:\n            mp4_file.write(mp4_response.content)\n        print(f\"MP4 file saved as {file_path}\")\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to download MP4 file from {mp4_url}: {e}\")",
        "detail": "mediaMp4Download.mp4_dl_all_mp4dl",
        "documentation": {}
    },
    {
        "label": "download_all_mp4_urls",
        "kind": 2,
        "importPath": "mediaMp4Download.mp4_dl_all_mp4dl",
        "description": "mediaMp4Download.mp4_dl_all_mp4dl",
        "peekOfCode": "def download_all_mp4_urls(results):\n    for result in results:\n        mp4_url = result[\"mp4Url\"]\n        startTimestamp = result[\"startTimestamp\"].replace(\"%3A\", \":\")\n        endTimestamp = result[\"startTimestamp\"].replace(\"%3A\", \":\")\n        file_name = f\"{deviceId}_{startTimestamp}_{endTimestamp}_output.mp4\"\n        download_mp4(mp4_url, file_name)\ndef main():\n    url = f\"https://{baseUrl}/api/v3.0/media?deviceId={deviceId}&type=main&mediaType=video&startTimestamp__gte={startTimestamp}&endTimestamp__lte={endTimestamp}&coalesce=true&include=mp4Url&pageSize=100\"\n    headers = {",
        "detail": "mediaMp4Download.mp4_dl_all_mp4dl",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mediaMp4Download.mp4_dl_all_mp4dl",
        "description": "mediaMp4Download.mp4_dl_all_mp4dl",
        "peekOfCode": "def main():\n    url = f\"https://{baseUrl}/api/v3.0/media?deviceId={deviceId}&type=main&mediaType=video&startTimestamp__gte={startTimestamp}&endTimestamp__lte={endTimestamp}&coalesce=true&include=mp4Url&pageSize=100\"\n    headers = {\n        \"accept\": \"application/json\",\n        \"authorization\": \"Bearer \" + access_token\n    }\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        data = json.loads(response.text)\n        results = data[\"results\"]",
        "detail": "mediaMp4Download.mp4_dl_all_mp4dl",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT0",
        "kind": 5,
        "importPath": "mediaMp4Download.mp4_dl_all_mp4dl",
        "description": "mediaMp4Download.mp4_dl_all_mp4dl",
        "peekOfCode": "TIMESTAMP_FORMAT0 = \"%3A\"\nTIMESTAMP_FORMAT1 = \"%2B\"\n# Define the folder path where you want to save the MP4 files\noutput_folder = \"mp4dl\"\n# Ensure the output folder exists; create it if it doesn't\nif not os.path.exists(output_folder):\n    os.makedirs(output_folder)\n# Load access token from the file\nwith open('access_response.json') as user_file:\n    file_contents = json.load(user_file)",
        "detail": "mediaMp4Download.mp4_dl_all_mp4dl",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT1",
        "kind": 5,
        "importPath": "mediaMp4Download.mp4_dl_all_mp4dl",
        "description": "mediaMp4Download.mp4_dl_all_mp4dl",
        "peekOfCode": "TIMESTAMP_FORMAT1 = \"%2B\"\n# Define the folder path where you want to save the MP4 files\noutput_folder = \"mp4dl\"\n# Ensure the output folder exists; create it if it doesn't\nif not os.path.exists(output_folder):\n    os.makedirs(output_folder)\n# Load access token from the file\nwith open('access_response.json') as user_file:\n    file_contents = json.load(user_file)\n    access_token = file_contents[\"access_token\"]",
        "detail": "mediaMp4Download.mp4_dl_all_mp4dl",
        "documentation": {}
    },
    {
        "label": "output_folder",
        "kind": 5,
        "importPath": "mediaMp4Download.mp4_dl_all_mp4dl",
        "description": "mediaMp4Download.mp4_dl_all_mp4dl",
        "peekOfCode": "output_folder = \"mp4dl\"\n# Ensure the output folder exists; create it if it doesn't\nif not os.path.exists(output_folder):\n    os.makedirs(output_folder)\n# Load access token from the file\nwith open('access_response.json') as user_file:\n    file_contents = json.load(user_file)\n    access_token = file_contents[\"access_token\"]\n    token_type = file_contents[\"token_type\"]\n    deviceId = \"\"",
        "detail": "mediaMp4Download.mp4_dl_all_mp4dl",
        "documentation": {}
    },
    {
        "label": "session_url",
        "kind": 5,
        "importPath": "mediaMp4Download.mp4_dl_all_mp4dl",
        "description": "mediaMp4Download.mp4_dl_all_mp4dl",
        "peekOfCode": "session_url = f\"https://{mediaUrl}/media/session\"\nheaders = {\n    \"accept\": \"application/json\",\n    \"authorization\": \"Bearer \" + access_token\n}\nsession_response = requests.get(session_url, headers=headers, cookies={'credentials': 'include'})\nprint(\"session_response\", session_response)\nsession = requests.Session()\nsession.headers.update({\"accept\": \"application/json\", \"authorization\": \"Bearer \" + access_token})\ndef download_mp4(mp4_url, file_name):",
        "detail": "mediaMp4Download.mp4_dl_all_mp4dl",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "mediaMp4Download.mp4_dl_all_mp4dl",
        "description": "mediaMp4Download.mp4_dl_all_mp4dl",
        "peekOfCode": "headers = {\n    \"accept\": \"application/json\",\n    \"authorization\": \"Bearer \" + access_token\n}\nsession_response = requests.get(session_url, headers=headers, cookies={'credentials': 'include'})\nprint(\"session_response\", session_response)\nsession = requests.Session()\nsession.headers.update({\"accept\": \"application/json\", \"authorization\": \"Bearer \" + access_token})\ndef download_mp4(mp4_url, file_name):\n    try:",
        "detail": "mediaMp4Download.mp4_dl_all_mp4dl",
        "documentation": {}
    },
    {
        "label": "session_response",
        "kind": 5,
        "importPath": "mediaMp4Download.mp4_dl_all_mp4dl",
        "description": "mediaMp4Download.mp4_dl_all_mp4dl",
        "peekOfCode": "session_response = requests.get(session_url, headers=headers, cookies={'credentials': 'include'})\nprint(\"session_response\", session_response)\nsession = requests.Session()\nsession.headers.update({\"accept\": \"application/json\", \"authorization\": \"Bearer \" + access_token})\ndef download_mp4(mp4_url, file_name):\n    try:\n        mp4_response = session.get(mp4_url)\n        mp4_response.raise_for_status()\n        file_path = os.path.join(output_folder, file_name)\n        with open(file_path, \"wb\") as mp4_file:",
        "detail": "mediaMp4Download.mp4_dl_all_mp4dl",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "mediaMp4Download.mp4_dl_all_mp4dl",
        "description": "mediaMp4Download.mp4_dl_all_mp4dl",
        "peekOfCode": "session = requests.Session()\nsession.headers.update({\"accept\": \"application/json\", \"authorization\": \"Bearer \" + access_token})\ndef download_mp4(mp4_url, file_name):\n    try:\n        mp4_response = session.get(mp4_url)\n        mp4_response.raise_for_status()\n        file_path = os.path.join(output_folder, file_name)\n        with open(file_path, \"wb\") as mp4_file:\n            mp4_file.write(mp4_response.content)\n        print(f\"MP4 file saved as {file_path}\")",
        "detail": "mediaMp4Download.mp4_dl_all_mp4dl",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "def make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling\n    return response\ndef get_session_response(base_url):\n    session_url = f\"https://{base_url}/api/v3.0/media/session\"",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "get_session_response",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "def get_session_response(base_url):\n    session_url = f\"https://{base_url}/api/v3.0/media/session\"\n    print(\"/media/session requested\")\n    return make_request(session_url)\ndef clientsettings():\n    url = \"https://api.eagleeyenetworks.com/api/v3.0/clientSettings\"\n    try:\n        return make_request(url).json()[\"httpsBaseUrl\"][\"hostname\"]\n    except (json.JSONDecodeError, KeyError, requests.exceptions.RequestException) as e:\n        logging.error(f\"Failed to get client settings: {e}\")",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "clientsettings",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "def clientsettings():\n    url = \"https://api.eagleeyenetworks.com/api/v3.0/clientSettings\"\n    try:\n        return make_request(url).json()[\"httpsBaseUrl\"][\"hostname\"]\n    except (json.JSONDecodeError, KeyError, requests.exceptions.RequestException) as e:\n        logging.error(f\"Failed to get client settings: {e}\")\n        raise\nbase_url = clientsettings()\n#media_url = base_url.replace(\"api\", \"media\")\nmedia_url = clientsettings()",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "download_image",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "def download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:\n                    image_file.write(chunk)",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "def main():\n    try:\n        # Get the session response\n        session_response = get_session_response(base_url)\n        # Handle the session response if needed\n        if session_response.status_code == 200:\n            print(\"Session response received successfully.\")\n            # Process the session response as needed\n        else:\n            print(\"Failed to get session response.\")",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT0",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "TIMESTAMP_FORMAT0 = \"%3A\"\nTIMESTAMP_FORMAT1 = \"%2B\"\nOUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        access_token = json.load(user_file)[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")\n    exit(1)",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT1",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "TIMESTAMP_FORMAT1 = \"%2B\"\nOUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        access_token = json.load(user_file)[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")\n    exit(1)\n# Headers",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "OUTPUT_FOLDER",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "OUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        access_token = json.load(user_file)[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")\n    exit(1)\n# Headers\nheaders = {",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "headers = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\",\n}\n# Session\nsession = requests.Session()\nsession.headers.update(headers)\n# Ensure the output folder exists\nos.makedirs(OUTPUT_FOLDER, exist_ok=True)\n# Device ID and timestamps",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "session = requests.Session()\nsession.headers.update(headers)\n# Ensure the output folder exists\nos.makedirs(OUTPUT_FOLDER, exist_ok=True)\n# Device ID and timestamps\ndeviceId = \"\"\nunencoded_startTimestamp = \"2023-11-27T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "deviceId",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "deviceId = \"\"\nunencoded_startTimestamp = \"2023-11-27T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "unencoded_startTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "unencoded_startTimestamp = \"2023-11-27T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "unencoded_endTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "unencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "startTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "startTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling\n    return response",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "endTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "endTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling\n    return response\ndef get_session_response(base_url):",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "base_url = clientsettings()\n#media_url = base_url.replace(\"api\", \"media\")\nmedia_url = clientsettings()\ndef download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "#media_url",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "#media_url = base_url.replace(\"api\", \"media\")\nmedia_url = clientsettings()\ndef download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:\n            for chunk in response.iter_content(chunk_size=1024):",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "media_url",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage",
        "peekOfCode": "media_url = clientsettings()\ndef download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "def make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling\n    return response\ndef get_session_response(base_url):\n    session_url = f\"https://{base_url}/api/v3.0/media/session\"",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "get_session_response",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "def get_session_response(base_url):\n    session_url = f\"https://{base_url}/api/v3.0/media/session\"\n    print(\"/media/session requested\")\n    return make_request(session_url)\ndef clientsettings():\n    url = \"https://api.eagleeyenetworks.com/api/v3.0/clientSettings\"\n    try:\n        return make_request(url).json()[\"httpsBaseUrl\"][\"hostname\"]\n    except (json.JSONDecodeError, KeyError, requests.exceptions.RequestException) as e:\n        logging.error(f\"Failed to get client settings: {e}\")",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "clientsettings",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "def clientsettings():\n    url = \"https://api.eagleeyenetworks.com/api/v3.0/clientSettings\"\n    try:\n        return make_request(url).json()[\"httpsBaseUrl\"][\"hostname\"]\n    except (json.JSONDecodeError, KeyError, requests.exceptions.RequestException) as e:\n        logging.error(f\"Failed to get client settings: {e}\")\n        raise\nbase_url = clientsettings()\n#media_url = base_url.replace(\"api\", \"media\")\nmedia_url = clientsettings()",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "download_image",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "def download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:\n                    image_file.write(chunk)",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "def main():\n    try:\n        # Get the session response\n        session_response = get_session_response(base_url)\n        # Handle the session response if needed\n        if session_response.status_code == 200:\n            print(\"Session response received successfully.\")\n            # Process the session response as needed\n        else:\n            print(\"Failed to get session response.\")",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT0",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "TIMESTAMP_FORMAT0 = \"%3A\"\nTIMESTAMP_FORMAT1 = \"%2B\"\nOUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        access_token = json.load(user_file)[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")\n    exit(1)",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT1",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "TIMESTAMP_FORMAT1 = \"%2B\"\nOUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        access_token = json.load(user_file)[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")\n    exit(1)\n# Headers",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "OUTPUT_FOLDER",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "OUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        access_token = json.load(user_file)[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")\n    exit(1)\n# Headers\nheaders = {",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "headers = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\",\n}\n# Session\nsession = requests.Session()\nsession.headers.update(headers)\n# Ensure the output folder exists\nos.makedirs(OUTPUT_FOLDER, exist_ok=True)\n# Device ID and timestamps",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "session = requests.Session()\nsession.headers.update(headers)\n# Ensure the output folder exists\nos.makedirs(OUTPUT_FOLDER, exist_ok=True)\n# Device ID and timestamps\ndeviceId = \"100f9f79\"\npageSize = 5000\nunencoded_startTimestamp = \"2023-11-27T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "deviceId",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "deviceId = \"100f9f79\"\npageSize = 5000\nunencoded_startTimestamp = \"2023-11-27T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "pageSize",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "pageSize = 5000\nunencoded_startTimestamp = \"2023-11-27T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "unencoded_startTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "unencoded_startTimestamp = \"2023-11-27T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "unencoded_endTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "unencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "startTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "startTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling\n    return response",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "endTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "endTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling\n    return response\ndef get_session_response(base_url):",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "base_url = clientsettings()\n#media_url = base_url.replace(\"api\", \"media\")\nmedia_url = clientsettings()\ndef download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "#media_url",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "#media_url = base_url.replace(\"api\", \"media\")\nmedia_url = clientsettings()\ndef download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:\n            for chunk in response.iter_content(chunk_size=1024):",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "media_url",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "peekOfCode": "media_url = clientsettings()\ndef download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_main",
        "documentation": {}
    },
    {
        "label": "make_request",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "def make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling\n    return response\ndef get_session_response(base_url):\n    session_url = f\"https://{base_url}/api/v3.0/media/session\"",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "get_session_response",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "def get_session_response(base_url):\n    session_url = f\"https://{base_url}/api/v3.0/media/session\"\n    print(\"/media/session requested\")\n    return make_request(session_url)\ndef clientsettings():\n    url = \"https://api.eagleeyenetworks.com/api/v3.0/clientSettings\"\n    try:\n        return make_request(url).json()[\"httpsBaseUrl\"][\"hostname\"]\n    except (json.JSONDecodeError, KeyError, requests.exceptions.RequestException) as e:\n        logging.error(f\"Failed to get client settings: {e}\")",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "clientsettings",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "def clientsettings():\n    url = \"https://api.eagleeyenetworks.com/api/v3.0/clientSettings\"\n    try:\n        return make_request(url).json()[\"httpsBaseUrl\"][\"hostname\"]\n    except (json.JSONDecodeError, KeyError, requests.exceptions.RequestException) as e:\n        logging.error(f\"Failed to get client settings: {e}\")\n        raise\nbase_url = clientsettings()\n#media_url = base_url.replace(\"api\", \"media\")\nmedia_url = clientsettings()",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "download_image",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "def download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:\n                    image_file.write(chunk)",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "def main():\n    try:\n        # Get the session response\n        session_response = get_session_response(base_url)\n        # Handle the session response if needed\n        if session_response.status_code == 200:\n            print(\"Session response received successfully.\")\n            # Process the session response as needed\n        else:\n            print(\"Failed to get session response.\")",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT0",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "TIMESTAMP_FORMAT0 = \"%3A\"\nTIMESTAMP_FORMAT1 = \"%2B\"\nOUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        access_token = json.load(user_file)[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")\n    exit(1)",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP_FORMAT1",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "TIMESTAMP_FORMAT1 = \"%2B\"\nOUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        access_token = json.load(user_file)[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")\n    exit(1)\n# Headers",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "OUTPUT_FOLDER",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "OUTPUT_FOLDER = \"mp4dl\"\n# Load access token\ntry:\n    with open('access_response.json') as user_file:\n        access_token = json.load(user_file)[\"access_token\"]\nexcept (IOError, KeyError) as e:\n    logging.error(f\"Failed to load access token from 'access_response.json': {e}\")\n    exit(1)\n# Headers\nheaders = {",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "headers = {\n    \"accept\": \"application/json\",\n    \"authorization\": f\"Bearer {access_token}\",\n}\n# Session\nsession = requests.Session()\nsession.headers.update(headers)\n# Ensure the output folder exists\nos.makedirs(OUTPUT_FOLDER, exist_ok=True)\n# Device ID and timestamps",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "session",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "session = requests.Session()\nsession.headers.update(headers)\n# Ensure the output folder exists\nos.makedirs(OUTPUT_FOLDER, exist_ok=True)\n# Device ID and timestamps\ndeviceId = \"\"\npageSize = 5000\nunencoded_startTimestamp = \"2023-11-27T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "deviceId",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "deviceId = \"\"\npageSize = 5000\nunencoded_startTimestamp = \"2023-11-27T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "pageSize",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "pageSize = 5000\nunencoded_startTimestamp = \"2023-11-27T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "unencoded_startTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "unencoded_startTimestamp = \"2023-11-27T00:00:00.000+00:00\"\nunencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "unencoded_endTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "unencoded_endTimestamp = \"2023-11-30T23:59:00.000+00:00\"\nstartTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "startTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "startTimestamp = unencoded_startTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\nendTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling\n    return response",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "endTimestamp",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "endTimestamp = unencoded_endTimestamp.replace(\":\", TIMESTAMP_FORMAT0).replace(\"+\", TIMESTAMP_FORMAT1)\ndef make_request(url):\n    try:\n        response = session.get(url)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(f\"Failed to make request to {url}: {e}\")\n        raise  # Re-raise the exception for better error handling\n    return response\ndef get_session_response(base_url):",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "base_url",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "base_url = clientsettings()\n#media_url = base_url.replace(\"api\", \"media\")\nmedia_url = clientsettings()\ndef download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "#media_url",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "#media_url = base_url.replace(\"api\", \"media\")\nmedia_url = clientsettings()\ndef download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:\n            for chunk in response.iter_content(chunk_size=1024):",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    },
    {
        "label": "media_url",
        "kind": 5,
        "importPath": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "description": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "peekOfCode": "media_url = clientsettings()\ndef download_image(url, file_name):\n    try:\n        print(f\"Downloading image from {url}\")\n        response = session.get(url, stream=True)\n        response.raise_for_status()\n        file_path = os.path.join(OUTPUT_FOLDER, file_name)\n        with open(file_path, \"wb\") as image_file:\n            for chunk in response.iter_content(chunk_size=1024):\n                if chunk:",
        "detail": "mediaRecordedImage.ee_apiv3_recordedImage_preview",
        "documentation": {}
    }
]